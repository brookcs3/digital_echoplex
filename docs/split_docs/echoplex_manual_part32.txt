G 19 ShortUndo Immediately execute the ShortUndo function (Undo to end) 
G# 20 SUSNextLoop Sustain Action NextLoop (NoteOn = NextLoop, NoteOff = PreviousLoop) 
A 21 SUSReplace Sustain Action Replace A# 22 SUSSubstitute Sustain Action Substitute 
7-4 Echoplex Digital Pro Plus Users Manual 
MIDI Command List 
Continued 

B  23  SUSToggleReverse  Sustain Action Reverse  
C  24  SUSToggleSpeed  Sustain Action HalfSpeed  
C#  25  Reset  Immediately reset current loop  
D  26  GeneralReset  Immediately reset all loops  
D#  27  Exit Parameters  Exit Parameter editing and return to Play state  
E  28  SUSUnroundedMultiply  Sustain Action Unrounded Multiply  
F  29  SUSUnroundedInsert  Sustain Action Unrounded Insert  
F#  30  SUSMute-Retrigger  Sustain Action Mute-Retrigger (NoteOn = Mute, NoteOff=Retrig.)  
G  31  LongUndo  Immediately execute the LongUndo function  
G#  32  Forward  Go into Forward  
A  33  Reverse  Go into Reverse  
A#  34  FullSpeed  Go into FullSpeed  
B  35  HalfSpeed  Go into HalfSpeed  
C  36  SamplePlay  Immediately restart the loop and play once  
C#  37  ReTrigger  Immediately restart the loop and play forever  
D  38  ReAlign  Restart the loop at next Global MIDI StartPoint  
D#  39  MuteReAlign  Immediately Mute and restart the loop at next Global MIDI StartPoint  
E  40  QuantMIDIStartSong  Wait to next Local Loop StartPoint and then send a StartSong  
F  41  MuteQuantMIDIStartSong  Immediately Mute, then wait to next StartPoint and send StartSong  
F#  42  StartPoint  Set the StartPoint to the current spot in the loop  
G  43  QuantStartPoint  Wait to next Global MIDI StartPoint and then set the local StartPoint there  
G#  44  BeatTriggerSample  Mute and wait for BeatSync, then trigger loop to play once. Repeated BeatSyncs  
retrigger the loop.  
A  45  MIDIBeatSync  Virtually send a BeatSync pulse by MIDI  

LoopTriggers 
When multiple loops have been set up with the MoreLoops parameter, you can trigger them directly with MIDI Note messages. The LoopTrig parameter defines the base Note for Loop 1. The consecutive Loops occupy the notes above that, so Loop 2 is LoopTrig+1, Loop 3 is LoopTrig+2, etc. 

MIDI Command List 
Continued 

Preset Change 
MIDI Program Change commands are used to change Presets on the Echoplex. There are 15 Preset locations available, corresponding to MIDI Program Change 1 - 15. 

See also: MIDI In, MIDI Out, Channel, ControlSource, Source#, MIDI VirtualButtons, DirectMIDI, MIDI Sync Indicators, Transmitting MIDI, Receiving MIDI, LoopTriggering, LoopTrig, Presets 
Immediate Action MIDI DataWheel Parameter Editing Mode 
MIDI DataWheel can be used for editing parameters. 
The Feedback Knob value is transmitted by the MIDI continuous controller DataWheel (Continuous Controller #6) when in Parameter Editing Mode and TempoSelect. 
Likewise, the Echoplex receives the DataWheel control for changing the parameter values from MIDI. 
This is normally used when multiple Echoplexes are chained together by MIDI. Some of the parameters have many values available, and during editing the Feedback Knob becomes available as a DataWheel so they can be set faster. This control value is sent from the master unit to the slaves by way of the DataWheel controller in MIDI. The normal Continuous Controller you have set for Feedback is not used, because that would just change the Feedback setting on the slaves instead of the parameter value. Separating this functionality to the DataWheel controller keeps everything straight. 
If you are using another MIDI controller, you can easily use the DataWheel function for quickly editing parameters. 

See also: DataWheel, Channel, Feedback Knob, Parameter Button 
MIDIpipe Immediate Action Any Mode 
MIDI commands at the MIDI In port are intelligently filtered, merged, and sent to MIDI Out. 
All incoming MIDI commands received at the MIDI In Port are automatically monitored by the Echoplex and selectively sent to the MIDI Out Port, depending a bit on the state of the Echoplex. We call this function Piping. 
MIDIpipe makes it possible to have multiple Echoplexes chained together and easily switch between using them independently or together as stereo pairs, without needing to reconfigure the MIDI cabling. MIDIpipe also makes it simple to work with multiple devices sharing the same MIDI clock. MIDIpipe is similar to a MIDI merge function, except with Piping the Echoplex is intelligently deciding which MIDI messages should be piped to the output or not. A MIDI Merge function would send everything through, which can cause major problems in some situations. MIDIpipe intelligently prevents such problems. 
MIDIpipe works with very low latency, so you will not notice any significant difference between a command that is piped and one that went direct or used the MIDI Thru Port. 

MIDIPIPE AND MIDI SYNC 
MIDI clock is piped when Sync=In or Sync=Off with a maximum delay of 2ms. This makes it easy to chain together several Echoplexes with the same source clock as sync, while still maintaining other interesting control options between them via MIDI. MIDI clock is not piped when Sync=Out or Sync=OuS, because the Echoplex will also be generating MIDI clock internally. If they both went out you would have double clocks. MIDIpipe automatically prevents that situation. 
MIDI StartSong, StopSong, and Continue messages are piped in all cases, so an upstream MIDI controller at the beginning of the MIDI chain can send commands to a downstream sequencer that is receiving 

MIDIpipe 
Continued 
clock from the Echoplex. When the Echoplex is piping StartSong, StopSong, and Continue messages it intelligently checks whether it has already sent the message itself within the last 10ms, and does not pipe if it has. This prevents multiple Echoplexes in parallel from stacking up the StartSong messages when they are all Recording simultaneously. 

MIDIPIPE PREVENTS COMMAND DUPLICATION 
Echoplex functions that normally send out a MIDI command do not duplicate the command if it is being piped. For example, if a MIDI command is received for Record, the command is piped to the output and used internally to start the Record function. The Record function does not then send another MIDI command for Record as it normally would, so the commands do not get doubled by piping. 

MIDIPIPE OF SYSEX 
MIDI Sysex commands are also piped immediately, which is convenient for controlling multiple Echoplexes from a computer using a sysex librarian utility. Unfortunately, while piping Sysex commands the audio is stopped due to the complexity of handling the sysex commands in real time. This is not audible for short commands like changing a single parameter, but you may hear it for long Sysex strings. 

See also: MIDI In, MIDI Out, Channel, ControlSource, Source# 
MIDI VirtualButtons Immediate Action Play Mode 
Midi Commands can be used to emulate the Front Panel Buttons 
A set of MIDI commands in the Echoplex  are called MIDI VirtualButtons, because they behave exactly the same way the corresponding front panel buttons do. 
With MIDI VirtualButtons you can press the front panel buttons virtually by MIDI, and do things like long presses and short presses and cross functions. 
If the ControlSource parameter is set to Notes, then a NoteOn message is the same as pressing the button, and a NoteOff message is the same as releasing the button. If the ControlSource Parameter is set to Continuous Controllers, a controller with a positive value is the same as pressing a button, and a controller message with a value of 0 is the same as releasing the button. 
This press and release concept is important to remember when programming a MIDI controller. When using VirtualButtons you have to make sure you send both the NoteOn and the NoteOff, so that you both press and release the button! 
The VirtualButtons emulate the front panel interface in MIDI. However, there are more VirtualButtons than front panel buttons because we offer all the InsertMode options simultaneously from MIDI as if they were separate buttons. The MIDIInsertButton is the exception, it still does what is selected in InsertMode for consistency. 
VirtualButtons allow you to use MIDI to take advantage of the economical design of the front panel interface, which lets you get a lot of functionality out of a few buttons. 
See the Source# section in the Parameters chapter for the command list and specific note or controllers needed for each VirtualButton. 

See also: MIDI In, MIDI Out, Channel, ControlSource, Source#, DirectMIDI 
Immediate Action Receiving MIDI Commands Play Mode 
Use a MIDI controller to command the Echoplex. 
Receiving MIDI commands is similar to transmitting. There are two primary types of MIDI commands, VirtualButtons and DirectMIDI. They are described in more detail in the under their own headings in this section. 
VirtualButtons always require two MIDI messages. When ControlSource=Notes, a NoteOn message indicates pressing the button, and a NoteOff (or NoteOn velocity 0) indicates releasing it. When ControlSource=Controllers, the appropriate Controller with a non-zero value indicates pressing the button. Sending the controller again with a value of 0 indicates releasing the button. 
Unlike MIDI VirtualButtons, in most cases DirectMIDI commands only require the NoteOn message, or the single continuous controller message with a non-zero value. They do not need the NoteOff. This is not true for the SUS DirectMIDI commands. These use the NoteOn message to start their function and the NoteOff message to end it, similar to the way SUS commands work from the front panel. 

See also: ControlSource, Channel, MIDI Command List, DirectMIDI, MIDI VirtualButtons, Transmitting MIDI Commands 
SysEx Immediate Action Play Mode 
MIDI SysEx messages can be used to backup and edit Parameters and Presets. 
All Parameters and Presets in the Echoplex can be edited by MIDI System Exclusive messages, or SysEx. 
SysEx is a useful way to backup your settings and Presets, send song parameters from a sequencer, or control single parameters from a capable MIDI controller. Since the sound is interrupted during this edit, you may hear a pause for a longer sequence of SysEx commands. For a single parameter change the dropout is not audible. 
All SysEx information is piped by the MIDIpipe functionality. This enables you to set two Echoplexes to different Device IDs and set them up independently, even with MIDI connected simply from the MIDI In Port to the MIDI Out Port. Make certain you have set the Echoplex device ID to something. If the Device ID is left at 0, SysEx will not be received. 

See also: SysEx Chapter, MIDI Pipe 
Immediate Action SUS MIDI Commands Play Mode 
MIDI Commands that execute functions with Sustain Pedal action. 
The concept of Sustain action, or SUS commands available for the front panel buttons is greatly expanded through DirectMIDI. 
Every Play Mode function has a SUS version separately available through MIDI, allowing each to be accessed at any time through a MIDI controller using NoteOn and NoteOff messages. 
