<P>Unfortunately we did not find a reasonable way to do a Quantized StartSong from the front panel without muting first. Therefore QuantMIDIStartSong is only available as a MIDI command. The MIDI location for QuantMIDIStartSong is source# + 40. See the MIDI command section for more information on how to use it. </P>
</Sect>

<Sect>
<H3>MuteQuantMIDIStartSong </H3>

<P>MuteQuantMIDIStartSong is a variation of QuantMIDIStartSong that first mutes the loop until StartSong is sent. This is useful for having the loop drop out and then everything start up together and in time. MuteQuantMIDIStartSong is also equivalent to using the Mute-Multiply combination from the front panel. The function can be executed at any time, independent of the Sync parameter setting. This allows you to always have a way to send a StartSong message in sync with the loop StartPoint, even if the Echoplex is not the clock master. The MIDI location for MuteQuantMIDIStartSong is source# + 41. See the MIDI command section for more information on how to use it. </P>
</Sect>

<Sect>
<H3 id="LinkTarget_537">SongPositionPointer and ContinueSong </H3>

<P>SongPositionPointer and ContinueSong messages are received according to the MIDI spec when Sync = In. Since we cannot reproduce the entire sequence of how the loop was built throughout the song, we just put the actual loop in the correct timing with any position of the song, assuming that the loop length and the sequencer timing stayed the same. </P>

<P>The positioning happens through ReAlign after the sequencer has been continued. After the sequencer has been stopped, put the Echoplex into the ReAlign state. It will wait for a sync event. Press Continue on the sequencer. It will send a SongPositionPointer message to the Echoplex to indicate where in the sequence it is starting from. It will then send a ContinueSong message and begin sending MIDI clocks again. The Echoplex will use the SPP information to determine where the Global MIDI StartPoint is. When the next Global StartPoint occurs, the Echoplex will trigger the loop at the beginning so that it is back in sync with the sequencer. </P>
</Sect>

<Sect>
<H3>QuantStartPoint </H3>

<P>If Sync=IN and an external clock is present, a long press on StartPoint moves the internal loop StartPoint to the next Global MIDI StartPoint defined by the external clock. (the “Beat 1” of the sequencer). The internal sync counters are realigned to the sequencer’s beat 1. </P>

<P>The result is the same as if you had built the current loop from the beginning with all operations quantized to the external clock. This is another way to “ReAlign” the loop to MIDI, although you are really redefining the StartPoint according to the external sync instead of retriggering the loop to it. It is especially interesting if you start with a nonrhythmic loop, then bring the drums in later to define the rhythm and sync for further development of the loop. </P>

<P>QuantStartPoint function is also available as a DirectMIDI command. </P>
</Sect>

<Sect>
<H3>AutoStartPoint </H3>

<P>The Echoplex maintains sync to an external clock by retriggering the loop at the Global MIDI StartPoint defined by the clock. An old problem is that true sync cannot be maintained when either FeedBack is reduced or Overdub is on, because an early arriving sync would erase the change made in that pass of the loop or cause glitches to record in the loop. We have to “free run” during that time to prevent such problems. There is no fix for this really, as it is a fundamental issue of how sync works in the Echoplex. Once Overdub is turned off and/or FeedBack brought back up, true sync returns. </P>

<P>We developed a trick for the case where the user reduces FeedBack a lot (a total change of the song for example). He probably does not really care to have his old fading loop stay in sync with the clock anymore, but he will want to stay in sync with whatever new things he overdubs. So when FeedBack is reduced enough and the Echoplex detects that the sync has drifted considerably off, we do an automatic StartPoint function. This sets the internal StartPoint of our loop at the time of the Global MIDI StartPoint defined by the external clock, and that point is then used for sync. Then when you bring FeedBack up again the StartPoint of the Loop and the external sequencer will be very close together and syncing resumes easily. </P>
</Sect>

<Sect>
<H3>8th/Cycle (8th/Beat on older units) </H3>

<P>The 8th/Cycle parameter has new values, allowing you to have up to 256 8th notes in a Cycle. This gives a lot more flexibility for how the Echoplex synchronizes to external devices. </P>

<P>When editing , the most important values come first to make them easy to select: 8,4,2,6,12,16,32,64,128,256, then it goes on with 1,2,3...96. Note that with the new data wheel feature, the top of the knob range ends at 54 instead of 96. This was done because we found it was easier to set the more typical values when the knob resolution was limited a little bit. To reach the values between 54 and 96 you simply use the front panel button to continue incrementing the number in the usual way. </P>

<P id="LinkTarget_538">Another new feature: If a loop is playing, a change of the 8th/Cycle value is only activated at the first Loop End after you come out of the Parameter editing state. At that point you jump directly to the new selected value. This means the value change occurs only while back in the playing state, and only at a rhythmically sensible point. This helps eliminate any confusion when working with a synchronized sequencer and makes for much smoother transitions into new time signatures. </P>

<P>Try changing 8th/Cycle with sync = out and a sequencer slaving to the clock.  You control the sequencer's tempo in relation to your loop! </P>
</Sect>

<Sect>
<H3>Improved Sync Routings </H3>

<P>Some improvements have been made in the routing of synchronization signals. </P>

<P>BeatSync and Sync=IN </P>

<P>If a BeatSync pulse is received during Reset while Sync=In, MIDIclock is sent out at the corresponding tempo but ignored if received at the MIDI In jack. The purpose of this is to receive a HW sync at the BeatSync of one unit and send the sync on to others as MIDIclock. This worked in LoopIII, but there was the possibility to get the units confused when both MIDI clocks and BeatSync were inputs to the first unit. </P>

<P>MIDI Clock in and BrotherSync </P>

<P>If a MIDI clock is received, BrotherSync is ignored </P>

<P>MIDIclock out and Sync = IN </P>

<P>MIDIclock is not sent anymore when Sync = In (as was true in LoopIII). This eliminates potential confusions with multiple clocks. </P>

<P>Clock Piping </P>

<P>Incoming MIDI clocks are always piped through to the output with a maximum delay of 2ms. This makes it easy to chain together several Echoplexes with the same source clock as sync, while still maintaining other interesting control options between them via MIDI. Clock is only piped when Sync = In or Off. Clock is not piped when Sync = Out or OuS. </P>
</Sect>
</Sect>

<Sect>
<H1 id="LinkTarget_539">Chapter 6: MIDI Control </H1>

<Sect>
<H3>DirectMIDI and VirtualButtons </H3>

<P>There are two kinds of MIDI commands now, VirtualButtons and DirectMIDI: </P>

<P>VirtualButtons </P>

<P>The existing MIDI commands from LoopIII are now called VirtualButtons, because they do exactly what the corresponding front panel button does. You can press the button virtually by MIDI, and do things like long presses and short presses and cross functions. If the ControlSource parameter is set to Notes, then a NoteOn message is the same as pressing the button, and a NoteOff message is the same as releasing the button. If the ControlSource Parameter is set to Continuous Controllers, a controller with a positive value is the same as pressing a button, and a controller message with a value of 0 is the same as releasing the button. This press and release concept is important to remember when programming a MIDI controller. When using VirtualButtons you have to make sure you send both the NoteOn and the NoteOff, so that you both press and release the button! </P>

<P>The virtual buttons emulate the front panel interface in MIDI. However, there are now more VirtualButtons than front panel buttons because we offer all the InsertMode options simultaneously from MIDI as if they were separate buttons. The MIDIInsertButton is the exception, it still does what is selected in InsertMode for consistency. VirtualButtons allow you to use MIDI to take advantage of the economical design of the front panel interface, which lets you get a lot of functionality out of a few buttons. </P>

<P>DirectMIDI </P>

<P>There are a lot of new MIDI commands that are called DirectMIDI. These do new things or reach functions directly that would take several button presses from the front panel. There are some limits to this, in that ReAlign, Half-Speed, and Quantize functions can execute at any time, but the others can only be executed while the loop is playing, overdubbing, or substituting. In many cases DirectMIDI commands only require the NoteOn message, or the single continuous controller message. They do not need the NoteOff. This is not true for the SUS commands. These use the NoteOn message to start their function and the NoteOff message to end it. </P>

<P>Source# and LoopTrig Parameter Defaults Adjusted </P>

<P>To create space for the new commands, the default for the LoopTrig Parameter was moved to 84, while the Source# parameter for the commands stays at 36. If the parameters are changed such that the ranges for LoopTriggers and commands overlap, preference is given to the LoopTriggers. So if you lower the LoopTrig parameter, some of the new DirectMIDI commands may become inaccessible. </P>

<P>Expanded MIDI Commands List </P>

<P>MIDI buttons </P>

<Table>
<TR>
<TH>Note </TH>

