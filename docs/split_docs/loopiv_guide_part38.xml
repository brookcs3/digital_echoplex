<TD>MuteQuantMIDIStartSong </TD>

<TD>Immediately Mute, then wait to next StartPoint and send StartSong </TD>
</TR>

<TR>
<TD>F# </TD>

<TD>42 </TD>

<TD>StartPoint </TD>

<TD>Set the StartPoint to the current spot in the loop </TD>
</TR>

<TR>
<TD>G </TD>

<TD>43 </TD>

<TD>QuantStartPoint </TD>

<TD>Wait to next Global MIDI StartPoint and then set the local StartPoint there </TD>
</TR>

<TR>
<TD>G# </TD>

<TD>44 </TD>

<TD>BeatTriggerSample </TD>

<TD>Mute and wait for BeatSync, then trigger loop to play once. Repeated BeatSyncs retrigger the loop. </TD>
</TR>

<TR>
<TD>A </TD>

<TD>45 </TD>

<TD>MIDIBeatSync </TD>

<TD>Virtually send a BeatSync pulse by MIDI </TD>
</TR>
</Table>
</Sect>

<Sect>
<H3>SUS MIDI Commands </H3>

<P>The concept of Sustain action, or “SUS” commands is greatly expanded through DirectMIDI. Every function has a SUS version separately available through MIDI, allowing them to be accessed at any time through a MIDI controller using NoteOn and NoteOff messages. The NoteOn starts the function and the NoteOff ends it. This opens up a whole new range of expressive possibilities with the Echoplex that were never available before! The SUS commands can also be controlled with Continuous Controller messages, where a positive value turns the function on, and a 0 value turns it off. The SUS MIDI commands are detailed in the table above. </P>
</Sect>

<Sect>
<H3>SUSNextLoop </H3>

<P>SUSNextLoop is an interesting special case of the SUS MIDI commands. With SUSNextLoop, pressing it puts you into the Next Loop and releasing it returns you to the previous loop. In other words, NoteOn puts you into the NextLoop and the NoteOff brings you back. This allows you to bounce in and out of an alternate loop from you main loop. Combining SUSNextLoop with functions like AutoRecord and LoopCopy can give many interesting possibilities for creating alternate loops to bounce in and out of. </P>
</Sect>

<Sect>
<H3>PreviousLoop </H3>

<P>An interesting feature that falls out of the SUSNextLoop function is a PreviousLoop function. The NoteOff command for SUSNextLoop sends you back one loop. If you only use the NoteOff command for SUSNextLoop, it only sends you backwards through the loops, and becomes the PreviousLoop command! If you set one button on a MIDI controller to only send the NoteOn for SUSNextLoop, and another button to only send the NoteOff for SUSNextLoop, you have a convenient way to go forward and backwards through your loops. </P>
</Sect>

<Sect>
<H3>MIDI pipe </H3>

<P>All incoming MIDI commands received at the MIDI In port are monitored and selectively sent to the MIDI Out port, depending a bit on the state of the Echoplex. We call this “Piping”.  MIDIpipe makes it possible to have multiple Echoplexes chained together and easily switch between using them independently or together as stereo pairs. It also makes it simple to work with multiple devices sharing the same MIDI clock. It is similar to a MIDI merge function, except with Piping the Echoplex is intelligently deciding which things should be piped to the output or not. A Merge function would send everything through, which can cause major problems in some situations. MIDIpipe intelligently prevents such problems. </P>

<P>MIDIpipe works with very low latency, so you will not notice any significant difference between a command that is piped and one that went direct. </P>

<P>MIDI Sysex commands are also piped immediately, which is convenient for controlling multiple Echoplexes from a PC using a sysex librarian utility. Unfortunately, while piping Sysex commands the audio is stopped due to the complexity of handling the sysex commands in real time. This is not audible for short commands like changing a single parameter, but you may hear it for long Sysex strings. </P>

<P>MIDI clock is piped when Sync = In or Off. It is not piped when Sync = Out or OuS, because the Echoplex will also be generating MIDI clock internally. If they both went out you would have double clocks, so MIDIpipe prevents that. </P>

<P>StartSong, StopSong, and Continue messages are piped in all cases, so an external controller at the beginning of the MIDI chain can send commands to a sequencer that is getting clock from the Echoplex. When the Echoplex is piping Start, Stop, and Continue messages it intelligently checks whether it has already sent the message itself within the last 10ms, and does not pipe if it has. This prevents multiple Echoplexes in parallel from stacking up the StartSong messages when they are all Recording simultaneously. </P>

<P>Echoplex functions that normally send out a MIDI command do not duplicate the command if it is being piped. For example, if a MIDI command is received for Record, the command is piped to the output and used internally to start the Record function. The Record function does not then send another MIDI command for Record as it normally would, so the commands do not get doubled by piping. </P>
</Sect>

<Sect>
<H3 id="LinkTarget_542">MIDI Data Wheel </H3>

<P>The Feedback knob value is transmitted by the MIDI continuous controller DataWheel (Continuous Controller #6) when in Parameters and Tempo Select. Likewise, the Echoplex receives the DataWheel control for changing the parameter values from MIDI. </P>
</Sect>

<Sect>
<H3>Sysex </H3>

<P>All parameters can be edited by Sysex. This is a useful way to backup your settings and presets, send song parameters from a sequencer, or control single parameters from a capable MIDI controller. Since the sound is interrupted during this edit, you may hear a pause for a longer sequence of Sysex commands. For a single parameter change the dropout is not audible. All Sysex information is piped so you can set two Echoplexes to different Device IDs and set them up separately, even with MIDI connected simply from MID-In to MIDI-out. See the Sysex section for more details. </P>
</Sect>

<Sect>
<H3>MIDI Sync Indicators </H3>

<P>MIDI notes are transmitted out at various synchronization points related to the current loop. These are shown at the top of the MIDI command table above. MIDI notes are sent to indicate each Loop StartPoint, Global MIDI StartPoint, Cycle point, and 8th note. The Global MIDI StartPoint note is only sent if it is different from the Local StartPoint. The 8th note is sent at points determined by the 8th/Cycle parameter and the loop length. </P>

<P>The purpose of these notes is to provide a convenient marker point when recording the Echoplex output into an audio sequencing or hard disk recording program. If you also record the midi output you can easily see the StartPoints, Cycle points, and 8th notes of your loops in the track windows. </P>

