<TD>multiplying </TD>

<TD>Pedal </TD>

<TD>Pedal </TD>

<TD>100% </TD>
</TR>

<TR>
<TD>inserting </TD>

<TD>Pedal </TD>

<TD>Pedal </TD>

<TD>100% </TD>
</TR>

<TR>
<TD>replacing </TD>

<TD>0 </TD>

<TD>100% </TD>

<TD>0 </TD>
</TR>

<TR>
<TD>mute </TD>

<TD>Pedal </TD>

<TD>Pedal </TD>

<TD>0 </TD>
</TR>
</Table>

<P>Using the New InterfaceModes with a Stereo Echoplex Setup </P>

<P>Many of the new InterfaceModes require a pedal connected to the feedback pedal jack in order to be available at all, and use that pedal as a key part of their functionality. This causes a problem with the traditional Echoplex Stereo setup, where a pedal is only connected in the Master side, and all value changes made with it are sent to the Slave Echoplex by MIDI. With the new InterfaceModes, the slave in such a setup will not have a pedal inserted and it can not be set to the new InterfaceModes. It will only cycle through the first four, while the master cycles through all 8. (This was also true in LoopIII and found to be unsolvable, but we only had OutMode where it happened so it didn’t affect many people.) </P>

<P>There are a few ways to work around this problem. </P>

<P>One way is to use a stereo volume pedal for the feedback pedal jack. Connect the two channels of the pedal to the two Echoplexes, and then each will have a pedal inserted with the control coming from the same place. Both can be set to all InterfaceModes, and be controlled appropriately. If you are really picky, you may find that your pedal is not exact between channels, so you may find values are not set exactly the same between the two Echoplexes. Fixing this will either mean finding a pedal that is better matched, or soldering a wire between the two potentiometer wipers inside your pedal to force them to have the same voltage. (This makes the pedal useless as a true stereo volume pedal, so make sure you understand what you are doing before attempting such a modification.) </P>

<P>A second approach is to use a single mono pedal connected to both units with a Y connector. For this to work, the potentiometer in the pedal must be half the resistance of the pedal requirement for a single Echoplex. This means it will have to be approximately 10Kohms or greater, but you may need to experiment a bit to find a pedal that uses the full range in the best way. For some Echoplex units, values as low as 5Kohm work better. </P>

<P>A third way which is less useful is to insert a dummy connector into the Feedback Pedal jack of the slave, without connecting it to anything. Then you will be able to at least set the slave to any of the InterfaceModes and use some of their functionality, but on the slave you will not be able to control some parameters that the pedal controls in some of the InterfaceModes. Any Feedback settings controlled by the pedal will be sent by MIDI from the Master, so InterfaceModes that use the pedal for Feedback will work fine. But Input and Output level will not be transmitted, so any InterfaceMode that uses the pedal for those will not work very well this way for Stereo. </P>
</Sect>

<Sect>
<H3>NextOverdub and SimpleCopy </H3>

<P>Next-Overdub with SwitchQuantize still engages Overdub in the next loop as it did in LoopIII, but if this next loop is empty (reset), it automatically creates a full copy of the previous loop and lets you Overdub as it copies. It does not continue adding multiples as the normal copy function does. This function terminates by itself at the end of the loop. We call this function SimpleCopy. </P>
</Sect>

<Sect>
<H3 id="LinkTarget_522">Double-Click – SmartButton Presses </H3>

<P>Double-Click Copying </P>

<P>When you are triggering loops with MIDI and SwitchQuant is on, repeating (double-clicking) the same note in the lame duck period will do a copy into the next loop. This is similar to using Next-Multiply, but is much quicker and simpler to use from a keyboard. </P>

<P>Double-Click Record </P>

<P>If the current loop is in reset, and this double-click note is for the current loop, we Record onto it. </P>

<P>Double-Click Multiply </P>

<P>If we have a loop playing and we double-click the current loop, we do a Multiply. </P>

<P>Double-Click StopRecord and StopMultiply </P>

<P>If Record or Multiply is going and we press the same note again, we end the Record or Multiply and do nothing else. </P>

<P>Long Press Reset </P>

<P>If you do a long press on the note for the Loop you are currently in, the loop is reset. This is not the case when SamplerStyle = Att. In that case the currently loop is just retriggered and played as normal for SamplerStyle=Att. </P>

<P>With this feature you have most functions under control simply by connecting a MIDI keyboard or other MIDI controller programmed with the notes from 84 to 99. </P>
</Sect>

<Sect>
<H3>MIDI pipe </H3>

<P>All incoming MIDI commands received at the MIDI In port are monitored and selectively sent to the MIDI Out port, depending a bit on the state of the Echoplex. We call this “Piping”. MIDIpipe makes it possible to have multiple Echoplexes chained together and easily switch between using them independently or together as stereo pairs. It also makes it simple to work with multiple devices sharing the same MIDI clock. It is similar to a MIDI merge function, except with Piping the Echoplex is intelligently deciding which things should be piped to the output or not. A Merge function would send everything through, which can cause major problems in some situations. MIDIpipe intelligently prevents such problems. </P>

<P>MIDIpipe works with very low latency, so you will not notice any significant difference between a command that is piped and one that went direct. </P>

<P>MIDI Sysex commands are also piped immediately, which is convenient for controlling multiple Echoplexes from a PC using a sysex librarian utility. Unfortunately, while piping Sysex commands the audio is stopped due to the complexity of handling the sysex commands in real time. This is not audible for short commands like changing a single parameter, but you may hear it for long Sysex strings. </P>

<P>MIDI clock is piped when Sync = In or Off. It is not piped when Sync = Out or OuS, because the Echoplex will also be generating MIDI clock internally. If they both went out you would have double clocks, so MIDIpipe prevents that. </P>

<P>StartSong, StopSong, and Continue messages are piped in all cases, so an external controller at the beginning of the MIDI chain can send commands to a sequencer that is getting clock from the Echoplex. When the Echoplex is piping Start, Stop, and Continue messages it intelligently checks whether it has already sent the message itself within the last 10ms, and does not pipe if it has. This prevents multiple Echoplexes in parallel from stacking up the StartSong messages when they are all Recording simultaneously. </P>

<P>Echoplex functions that normally send out a MIDI command do not duplicate the command if it is being piped. For example, if a MIDI command is received for Record, the command is piped to the output and used internally to start the Record function. The Record function does not then send another MIDI command for Record as it normally would, so the commands do not get doubled by piping. </P>
</Sect>
