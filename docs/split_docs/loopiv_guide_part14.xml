<LBody>Mute: if you press Mute during the second loop, it will Mute and stay in that loop. </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

<LBody>Insert: If you press Insert while the second loop is playing, it will retrigger. You can retrigger it as much as you like, and when you let it go to the end it will return to the first loop. </LBody>
</LI>

<LI>
<Lbl id="LinkTarget_515">• </Lbl>

<LBody>Multiply: Multiply is not available while the second loop is playing. </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

<LBody>Overdub: If you turn on overdub while the second loop is playing, it will be assumed that you want to make some change to the new loop and it will not switch back to the first one. If you have SwitchQuantize on and press Overdub while you are still waiting for the first loop to finish, Overdub will be on when you go to the second loop. Again, it will not return to the first loop after it is done, and the overdub is kept. </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

<LBody>Next: Next is interesting. If you press NextLoop again while the second loop is playing, you will go to a third loop. When the third loop is finished playing once, it returns to the second loop. When the second loop finishes playing one more time, it returns to the first loop! So you can stack up a sequence of jumps and then return to the beginning, all automatically! There is a limit to this, in that you can’t NextLoop through the same loop several times and automatically jump back to it that many times. It will stop the first time it returns to that loop and ignore previous steps in the sequence. </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

<LBody>Record: If you press Record while the second loop is playing, you will record a new one. It will continue repeating instead of jumping back to the first loop. </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

<LBody>AutoRecord: If the loop you jump to with Once is in reset and AutoRecord is on, you record the B part and immediately jump back to the previous loop when you tap Record to finish. If you press some additional function during recording for an alternate ending (like Multiply or Insert), it will go ahead and do that function and stay in the second loop. There is a limitation with AutoRecord and several loops. If you use AutoRecord to record several loops it will only jump back one loop at the end instead of jumping back through all of them. </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

<LBody>LoopCopy and TimeCopy: If you have LoopCopy on or if you engage a LoopCopy by pressing Multiply, Insert, or Overdub when using SwitchQuantize to change loops, the copy will be made into the new loop. When you finish the copy with a press of Multiply (or Insert) it will jump back to the first loop. This is an interesting way to make copies into a new loop and not necessarily listen to it repeat immediately. </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

<LBody>Similarly, if you press any additional function during the quantizing period, it does not switch back to the previous loop. The Echoplex assumes you want to elaborate on the B part. </LBody>
</LI>
</L>

<P>SamplerStyle = Attack (Att) </P>

<P>The existing SamplerStyle value Attack only makes sense when loops are triggered by MIDI. This gives a keyboard like “play as long as you press” function, but it never made sense with NextLoop. So now when the NextLoop button is pressed (or MIDI- NextLoopButton), it is the same as “run”. The loop starts in the same place where you last left it. If you used SamplerStyle=Att with LoopIII to make the new loop restart, you should now use SamplerStyle=STA. </P>

<P>SamplerStyle = Run (run) </P>

<P>Run is unchanged from LoopIII. With NextLoop or with MIDI triggers, you enter the loop at the last point where it was left. </P>
</Sect>

<Sect>
<H3>Record-to-NextRecord </H3>

<P>Many users requested the Record-to-NextRecord function. With multiple loops set up, you can now end recording with a tap of NextLoop and jump immediately to the next loop. </P>

<P>If Sync is being used, the recording will be rounded first and it will jump quantized at the Sync StartPoint. </P>

<P>If AutoRecord is on, the Echoplex immediately continues recording in the new loop. This is especially useful for filling the loops with the various parts of a song while playing continuously. You just keep pressing Next as you play! Similarly you can have LoopCopy set to Sound or Time, and it will automatically copy from one loop to the next as you press NextLoop. </P>

<P>When MoreLoops is 1, ending Record by pressing Next does a stop Record and begins playing the loop, just as if the recording had been ended with another press of Record. Note however, that when MoreLoops = 1, NextLoop becomes a retrigger button, so Record-to-Next can be an interesting way to immediately go into stutters of your loop. </P>
</Sect>

<Sect>
<H3 id="LinkTarget_516">LoopWindowing </H3>

<P>LoopWindowing originally started as an obscure bug in the LoopIIIv5.0 software. People liked it so much they insisted we not fix it, and instead turn it into a feature! The “bug” has now been cleaned up to work predictably and in a consistent manner with other functions. So now it really is an interesting function that we call LoopWindowing. </P>

<P>Understanding LoopWindowing </P>

<P>LoopWindowing lets you define a short segment, or Window, out of a longer loop and let that short segment repeat as a loop. This Window is defined on the fly, in real time. You then have the ability to move that window through the larger loop as it exists in memory. In fact, it is more than just moving the window over the loop as it currently exists, you really move back through the memory, through all of the changes that have been recorded by overdubbing and multiplying and whatever. It stops when you reach the very initial point where the first tap of Record happened. LoopWindowing can give a variety of interesting effects, depending on the size of the Window and how much material is in the memory to Window through. You can even resize the Window on the fly, to capture different sized chunks of memory! </P>

<P>Creating the LoopWindow </P>

<P>The LoopWindow is created by either re-multiplying a loop or doing an Unrounded Multiply. Both of these are standard techniques that were possible in past versions of Loop. Re-Multiplying is done on a loop that has already had Multiplies or Inserts done on it, so you can see the Multiple display counting the cycles. If you press Multiply again on this loop, and then end it somewhere before the end of the loop, you will get a new loop of just that section. In this case it will be neatly rounded off to the previous cycle length. This technique allows you to chop out Cycles from the larger loop. You may want to experiment with setting Quantize to Cycle or 8th as a way to get rhythmically aligned LoopWindows. </P>

<P>Unrounded Multiply is when you start a Multiply on a loop, and then end it with a press of Record. Instead of rounding off the cycle, it will stop immediately and redefine the new loop length at exactly that point. Unrounded Multiply is a great way to change rhythms by chopping out a completely new loop lengths. Using the new InsertMode=SUS function is also an interesting way to create Unrounded Multiples. </P>

<P>Either one of these techniques let you chop out a segment of your loop, either maintaining rhythm or not depending on what you want to do. </P>

<P>Moving the LoopWindow </P>

<P>Once a LoopWindow has been defined, we can move it backwards through the loop memory by pressing Undo. With each Undo press, the LoopWindow jumps back in memory by the size of the window, and then loops over that section. You can continue moving the window backwards to the point where the initial loop was started with the first tap of Record. If a Reverse has been done on the loop, then you can only move it back to the point of the Reverse. </P>

<P>Moving the LoopWindow works in the same way as Undo works, so it is useful to understand the distinction between a ShortUndo and a LongUndo. (Check the original Echoplex manual for more discussion on Undo.) Basically, a long-press of Undo will jump you back a complete LoopWindow length before your current window, and is the most obvious to use. A short-press of Undo sets the LoopWindow to end at the spot where you press it and begin a LoopWindow length before that. </P>

<P>For example: if you redefine the length of the LoopWindow from 8 seconds to 2 seconds, and then tap Undo at 1.5 seconds, it is only the last .5 seconds that change in that window. The previous 1.5 seconds of the Window remain intact in the new Window after that initial Undo button press, except they will now be coming at the end of the LoopWindow. Your new loop will start .5 seconds before the previous LoopWindow StartPoint, and end at the 1.5 second point where you tapped Undo. </P>

<P>Using ShortUndo is more complicated to understand, but is also more flexible. If you want to scroll through different sections of the loop cleanly with ShortUndo, press Undo right at the beginning of the window. This way you will really jump back a whole Window length. If you hit Undo somewhere within the boundaries of the window, you'll find that you get a blend between different memory window sections, with that blend happening at the exact point you hit Undo. So the timing of the Undo button press becomes a powerful tool for playing with the distinction between window fragments. It is especially powerful in rhythmic loops. </P>

