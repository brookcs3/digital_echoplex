<?xml version="1.0" encoding="UTF-8" ?><!-- Created from PDF via Acrobat SaveAsXML --><!-- Mapping Table version: 28-February-2003 --><TaggedPDF-doc><?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?><?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?><x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 9.1-c001 79.675d0f7, 2023/06/11-19:21:16        ">   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">      <rdf:Description rdf:about=""            xmlns:dc="http://purl.org/dc/elements/1.1/"            xmlns:xmp="http://ns.adobe.com/xap/1.0/"            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">         <dc:format>xml</dc:format>         <dc:creator>            <rdf:Seq>               <rdf:li>Kim Flint, Aurisis Research. LLC</rdf:li>            </rdf:Seq>         </dc:creator>         <dc:title>            <rdf:Alt>               <rdf:li xml:lang="x-default">Loop IV Guide.PDF</rdf:li>            </rdf:Alt>         </dc:title>         <xmp:CreateDate>2002-06-08T18:23:19</xmp:CreateDate>         <xmp:CreatorTool>Loop IV Guide.doc - Microsoft Word</xmp:CreatorTool>         <xmp:ModifyDate>2002-06-08T19:28:01-07:00</xmp:ModifyDate>         <pdf:Producer>Acrobat PDFWriter 4.05 for Windows NT</pdf:Producer>      </rdf:Description>   </rdf:RDF></x:xmpmeta>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           <?xpacket end="w"?><?xpacket end='r'?><bookmark-tree><bookmark title="Cover"><destination structID="LinkTarget_504"/></bookmark><bookmark title="Most Important!"><destination structID="LinkTarget_505"/></bookmark><bookmark title="Acknowledgements"><destination structID="LinkTarget_506"/></bookmark><bookmark title="Contents"><destination structID="LinkTarget_507"/></bookmark><bookmark title="Audience for this Manual"><destination structID="LinkTarget_508"/></bookmark><bookmark title="New Feature Overview"><destination structID="LinkTarget_508"/></bookmark><bookmark title="Ch 1: New Loop Functions"><destination structID="LinkTarget_509"/><bookmark title="Half Speed"><destination structID="LinkTarget_509"/></bookmark><bookmark title="SUS Commands - Granular Loops"><destination structID="LinkTarget_509"/></bookmark><bookmark title="Substitute"><destination structID="LinkTarget_510"/></bookmark><bookmark title="SyncRecord"><destination structID="LinkTarget_510"/></bookmark><bookmark title="Tempo Select"><destination structID="LinkTarget_511"/></bookmark><bookmark title="MultiIncrease"><destination structID="LinkTarget_512"/></bookmark><bookmark title="MoreLoops up to 16"><destination structID="LinkTarget_513"/></bookmark><bookmark title="New SwitchQuantize Values"><destination structID="LinkTarget_513"/></bookmark><bookmark title="LoopDividing"><destination structID="LinkTarget_514"/></bookmark><bookmark title="New SamplerStyle Options"><destination structID="LinkTarget_514"/></bookmark><bookmark title="Record-to-NextRecord"><destination structID="LinkTarget_515"/></bookmark><bookmark title="LoopWindowing"><destination structID="LinkTarget_516"/></bookmark><bookmark title="Retrigger while Playing"><destination structID="LinkTarget_517"/></bookmark><bookmark title="InterfaceModes - New Loop/Delay Parameter Values"><destination structID="LinkTarget_517"/><bookmark title="LoopMode"><destination structID="LinkTarget_517"/></bookmark><bookmark title="StutterMode"><destination structID="LinkTarget_518"/></bookmark><bookmark title="DelayMode"><destination structID="LinkTarget_518"/></bookmark><bookmark title="ExpertMode"><destination structID="LinkTarget_519"/></bookmark><bookmark title="InputMode"><destination structID="LinkTarget_519"/></bookmark><bookmark title="OutMode"><destination structID="LinkTarget_520"/></bookmark><bookmark title="ReplaceMode"><destination structID="LinkTarget_520"/></bookmark><bookmark title="FlipMode"><destination structID="LinkTarget_520"/></bookmark></bookmark><bookmark title="NextOverdub and SimpleCopy"><destination structID="LinkTarget_521"/></bookmark><bookmark title="Double-Click - SmartButton Presses"><destination structID="LinkTarget_522"/></bookmark><bookmark title="MIDI Pipe"><destination structID="LinkTarget_522"/></bookmark><bookmark title="QuantStartPoint"><destination structID="LinkTarget_523"/></bookmark><bookmark title="Load and Dump"><destination structID="LinkTarget_523"/></bookmark></bookmark><bookmark title="Ch 2: Function Improvements"><destination structID="LinkTarget_524"/><bookmark title="Improved Reverse and Undo while Reverse"><destination structID="LinkTarget_524"/></bookmark><bookmark title="Multiply-to-x and Insert-to-x CrossFunction Improvements"><destination structID="LinkTarget_524"/></bookmark><bookmark title="Undo Improvements"><destination structID="LinkTarget_525"/></bookmark><bookmark title="Exiting from SamplePlay to Play with Undo"><destination structID="LinkTarget_525"/></bookmark><bookmark title="Next-to-X CrossFunction Undo Improvement"><destination structID="LinkTarget_525"/></bookmark><bookmark title="Simultaneous Overdub"><destination structID="LinkTarget_526"/></bookmark><bookmark title="8ths/Cycle and Sync Param Changes occur in Rhythm"><destination structID="LinkTarget_526"/></bookmark></bookmark><bookmark title="Ch 3: Display"><destination structID="LinkTarget_527"/><bookmark title="Visual Tempo and Sync Guide"><destination structID="LinkTarget_527"/></bookmark><bookmark title="SyncTime"><destination structID="LinkTarget_528"/></bookmark><bookmark title="Feedback and Continuous Controller Display"><destination structID="LinkTarget_528"/></bookmark><bookmark title="Command Display"><destination structID="LinkTarget_528"/></bookmark><bookmark title="Memory Size Display"><destination structID="LinkTarget_528"/></bookmark></bookmark><bookmark title="Ch 4: New Parameter Settings"><destination structID="LinkTarget_529"/><bookmark title="Loop/Delay Parameter Settings"><destination structID="LinkTarget_529"/></bookmark><bookmark title="Quantize Parameter Settings"><destination structID="LinkTarget_529"/></bookmark><bookmark title="8ths/Cycle Parameter"><destination structID="LinkTarget_529"/></bookmark><bookmark title="Sync"><destination structID="LinkTarget_530"/></bookmark><bookmark title="RecordMode = Safe"><destination structID="LinkTarget_530"/></bookmark><bookmark title="InsertMode"><destination structID="LinkTarget_530"/></bookmark><bookmark title="MoreLoops"><destination structID="LinkTarget_530"/></bookmark><bookmark title="LoopTrig"><destination structID="LinkTarget_531"/></bookmark><bookmark title="SwitchQuantize"><destination structID="LinkTarget_531"/></bookmark><bookmark title="SamplerStyle"><destination structID="LinkTarget_531"/></bookmark></bookmark><bookmark title="Ch 5: Synchronization"><destination structID="LinkTarget_532"/><bookmark title="SyncRecord"><destination structID="LinkTarget_532"/></bookmark><bookmark title="Global/Local MIDI clock"><destination structID="LinkTarget_532"/></bookmark><bookmark title="ReAlign"><destination structID="LinkTarget_533"/></bookmark><bookmark title="StopSync"><destination structID="LinkTarget_534"/></bookmark><bookmark title="SyncStartPoint"><destination structID="LinkTarget_534"/></bookmark><bookmark title="Tempo Select"><destination structID="LinkTarget_535"/></bookmark><bookmark title="StartSont, StopSong, and Continue"><destination structID="LinkTarget_535"/></bookmark><bookmark title="Commanding a StartSong when Sync=In"><destination structID="LinkTarget_536"/></bookmark><bookmark title="QuantMIDIStartSong"><destination structID="LinkTarget_536"/></bookmark><bookmark title="MuteQuantMIDIStartSong"><destination structID="LinkTarget_536"/></bookmark><bookmark title="SongPositionPointer and ContinueSong"><destination structID="LinkTarget_537"/></bookmark><bookmark title="QuantStartPoint"><destination structID="LinkTarget_537"/></bookmark><bookmark title="AutoStartPoint"><destination structID="LinkTarget_537"/></bookmark><bookmark title="8th/Cycle"><destination structID="LinkTarget_537"/></bookmark><bookmark title="Improved Sync Routings"><destination structID="LinkTarget_538"/></bookmark></bookmark><bookmark title="Ch 6: MIDI Control"><destination structID="LinkTarget_539"/><bookmark title="DirectMIDI and VirtualButtons"><destination structID="LinkTarget_539"/></bookmark><bookmark title="Expanded MIDI Commands List"><destination structID="LinkTarget_539"/></bookmark><bookmark title="SUS MIDI Commands"><destination structID="LinkTarget_540"/></bookmark><bookmark title="SUSNextLoop"><destination structID="LinkTarget_541"/></bookmark><bookmark title="PreviousLoop"><destination structID="LinkTarget_541"/></bookmark><bookmark title="MIDI pipe"><destination structID="LinkTarget_541"/></bookmark><bookmark title="MIDI Data Wheel"><destination structID="LinkTarget_542"/></bookmark><bookmark title="Sysex"><destination structID="LinkTarget_542"/></bookmark><bookmark title="MIDI Sync Indicators"><destination structID="LinkTarget_542"/></bookmark></bookmark><bookmark title="Ch 7: Parameter Presets and Editing"><destination structID="LinkTarget_543"/><bookmark title="Presets"><destination structID="LinkTarget_543"/></bookmark><bookmark title="Preset Editor"><destination structID="LinkTarget_544"/></bookmark><bookmark title="Sysex Dump/Load"><destination structID="LinkTarget_544"/></bookmark><bookmark title="Sysex Individual Parameter Editing"><destination structID="LinkTarget_544"/></bookmark><bookmark title="DataWheel"><destination structID="LinkTarget_544"/></bookmark><bookmark title="DataWheel Continuous Controller"><destination structID="LinkTarget_545"/></bookmark></bookmark><bookmark title="Ch 8: Sample Dump"><destination structID="LinkTarget_546"/><bookmark title="Introduction"><destination structID="LinkTarget_546"/></bookmark><bookmark title="General Sample Dump"><destination structID="LinkTarget_546"/></bookmark><bookmark title="Echoplex Sample Dump"><destination structID="LinkTarget_547"/></bookmark><bookmark title="Sending a Dump (Dump button)"><destination structID="LinkTarget_547"/></bookmark><bookmark title="Sending and Receiving (Upload button)"><destination structID="LinkTarget_548"/></bookmark><bookmark title="Examples"><destination structID="LinkTarget_548"/></bookmark><bookmark title="How Long will it take"><destination structID="LinkTarget_549"/></bookmark><bookmark title="The Other End"><destination structID="LinkTarget_549"/></bookmark><bookmark title="Troubleshooting"><destination structID="LinkTarget_550"/></bookmark></bookmark><bookmark title="Ch 9: Sysex Control Detailed Documentation"><destination structID="LinkTarget_551"/></bookmark></bookmark-tree><P><Figure id="LinkTarget_504"><ImageData src="images/LoopIVGuide_img_0.jpg"/></Figure>® </P><Part><H2>For the Gibson/Oberheim Echoplex Digital Pro</H2><P>UpgradeGuideIV </P><P>Manual Version 1.02 LoopIV version 1.1 May 14, 2002 </P><P>aurisis research </P><P>Aurisis Research, LLC • PO Box 40200, Berkeley, CA 94704-4200 • http://www.aurisis.com • info@aurisis.com </P><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P><Sect><H1 id="LinkTarget_505">MOST IMPORTANT! </H1><P>At the first starting up of the new software, you have to do a Parameter reset. This resets all of the parameters to the correct default settings for LoopIV. To do the Parameter Reset: Hold down Parameters before you turn on the power, and keep holding it down until you see “Loop 4” scrolling across the screen. Then you can let it go. The Echoplex parameters will all have default values when it reaches the reset state. </P></Sect><Sect><H1 id="LinkTarget_506">Acknowledgements </H1><P>Aurisis Research would like to thank all of the incredible users who have inspired us over the years with your wonderful music and creative ideas.  Many of the new features and enhancements of LoopIV come from your suggestions. Your enthusiasm keeps us going! LoopIV was an incredibly difficult effort, without all of you we would never have finished it. </P><P>Several individuals deserve special recognition for their contributions to this project. </P><P>Claude Voit – For his constant stream of new ideas that led to many fundamental new features of LoopIV. The amazing new ReAlign synchronization feature was developed with Claude, along with many, many others. His tireless testing and debugging efforts over nearly two years did much bring LoopIV into reality. </P><P>Andy Butler – For dreaming up all of his InterfaceModes and creating completely new ways to control the loop in the process, as well as numerous suggestions about the subtleties of many functions. His tireless and thorough testing efforts also helped us to find numerous bugs. </P><P>Andy Ewen – For going way beyond the call of duty to make certain the Echoplex hardware stayed in production and the quality remained high. </P><P>Andre LaFosse – For his amazing and deep use of Loop and the Echoplex which helped inspire the whole range of SUS and granular functions, among other features. His uncanny knack for finding obscure bugs has been a tremendous help, as well as his quick testing of so many different feature combinations. Andre is famous for finding strange bugs and turning them into features. </P><P>David Torn – For his feature ideas, great music, and public support for Looping that has opened so many musicians to the possibilities in this technology. We hope Quantize=8th and LoopWindowing brings you great happiness. </P><P>Chris Muir – For constantly nagging us about the need for better MIDI control. He inspired the DirectMIDI control now in LoopIV. </P><P>Eberhard Weber – For his inspiration and support, and the idea of tempo LEDs. </P><P>David Kirkdorfer – For the MultiIncrease function and his great marketing studies that helped show just how much interest there is in the Echoplex. </P><P>Willy Strehler – For creation of the “double click” functions and his quick bug finding abilities. Willy also inspired many of the fundamental features developed in earlier versions of Loop, such as Quantize and the different Sync options. </P><P>Ljubo Majstorovic – For his testing and good humor and all the ideas he contributed for the previous versions. </P><P>Our beta testers -Claude Voit, Andy Butler, Andre LaFosse, Mark Hamburg, Bret Moreland, Dennis Leas, Jon Wagner, David Torn, Chris Muir, and Markus Reuter – thank you for getting us through the final stretch. </P><P>Henry Juszkiewicz and the Gibson Guitar Corporation – for continuing to believe in the Echoplex and keeping it alive all these years. Special thanks to all of the Gibson employees who have cared about the Echoplex and put some of their heart and soul into it. </P><P>Our Families and Friends – Thank you for your love and support and for putting up with all the time and energy that we have put into this. </P><P>If we’ve somehow forgotten you, please accept our apologies and let us know. We’ll be happy to update the list! </P><P>Aurisis Research Matthias Grob, Eric Obermuhlner, Kim Flint May, 2002 </P></Sect><Sect><H1 id="LinkTarget_507">Contents </H1><P>MOST IMPORTANT!.....................................................................................................3 </P><P>Acknowledgements..........................................................................................................4 </P><P>Contents ...........................................................................................................................5 </P><P>Audience for the Upgrade Manual...................................................................................9 </P><P>New Feature Overview ....................................................................................................9 New Functions and Features........................................................................................................................9 New Synchronization Features ....................................................................................................................10 New Parameter Values.................................................................................................................................10 New Display Features ..................................................................................................................................10 </P><P>Installation........................................................................................................................11 Installing LoopIV v1.0 EPROMs ................................................................................................................11 </P><P>Chapter 1: New Loop Functions .....................................................................................12 Half Speed ...................................................................................................................................................12 SUS Commands – Real Time Granular Loops.............................................................................................12 Substitute .....................................................................................................................................................13 The New Substitute Function...............................................................................................................13 Using Substitute...................................................................................................................................13 Advanced Use of Substitute.................................................................................................................13 SyncRecord..................................................................................................................................................13 Tempo Select ...............................................................................................................................................14 How to Use Tempo Select....................................................................................................................14 The Tempo Select Display ...................................................................................................................14 Tempo Select Commands.....................................................................................................................14 Setting the Tempo ................................................................................................................................15 Differences Between Sync = Out and Sync = OuS ..............................................................................15 MIDIclock and StartSongs...................................................................................................................15 Recording in Tempo.............................................................................................................................15 </P><L><LI><Lbl>1.</Lbl><LBody> Start up the sequencer before recording any loops.......................................................................15 </LBody></LI><LI><Lbl>2.</Lbl><LBody> Start up the Sequencer as you begin Recording your Loop .........................................................16 </LBody></LI></L><P>3. Record a Loop and Start the Sequencer Later..............................................................................16 SetTempo and Presets ..........................................................................................................................16 Sync=In and Sync=Off.........................................................................................................................16 Storing Tempo in Presets .....................................................................................................................16 </P><P>MultiIncrease ...............................................................................................................................................16 How to Use MultiIncrease ...................................................................................................................17 Example ...............................................................................................................................................17 MultiIncrease with Quantize=Loop .....................................................................................................17 </P><P>MoreLoops up to 16.....................................................................................................................................17 </P><P>New SwitchQuantize Values........................................................................................................................17 Loop (SwitchQuant = LOP).................................................................................................................17 Confirm Cycle (SwitchQuant = CCY) .................................................................................................17 Confirm Loop (SwitchQuant = CLP)...................................................................................................17 </P><P>LoopDividing...............................................................................................................................................18 </P><P>New SamplerStyle Options..........................................................................................................................18 SamplerStyle = Start (StA)...................................................................................................................18 SamplerStyle = Once (OnE).................................................................................................................18 SamplerStyle = Attack (Att).................................................................................................................19 SamplerStyle = Run (run) ....................................................................................................................19 </P><P>Record-to-NextRecord.................................................................................................................................19 </P><P>LoopWindowing ..........................................................................................................................................20 Understanding LoopWindowing..........................................................................................................20 Creating the LoopWindow...................................................................................................................20 Moving the LoopWindow....................................................................................................................20 Modifying the LoopWindow................................................................................................................21 </P><P>Retrigger while Playing ...............................................................................................................................21 </P><P>InterfaceModes – New Loop/Delay Parameter Values ................................................................................21 LoopMode  (Loop/Delay = LOP) .......................................................................................................21 StutterMode (Loop/Delay = Stu) .......................................................................................................22 DelayMode (Loop/Delay = DEL) .......................................................................................................22 ExpertMode (Loop/Delay = EXP) ......................................................................................................23 InputMode (Loop/Delay = In, Pedal Only)..........................................................................................23 OutMode (Loop/Delay = Out, Pedal Only)........................................................................................24 ReplaceMode  (Loop/Delay = rPL, Pedal Only) ..................................................................................24 FlipMode (Loop/Delay = FLI, Pedal Only) .........................................................................................24 Using the New InterfaceModes with a Stereo Echoplex Setup............................................................25 </P><P>NextOverdub and SimpleCopy ....................................................................................................................25 </P><P>Double-Click – SmartButton Presses...........................................................................................................26 Double-Click Copying .........................................................................................................................26 Double-Click Record ...........................................................................................................................26 Double-Click Multiply.........................................................................................................................26 Double-Click StopRecord and StopMultiply.......................................................................................26 Long Press Reset..................................................................................................................................26 </P><P>MIDI pipe ....................................................................................................................................................26 QuantStartPoint ...........................................................................................................................................27 Load and Dump ...........................................................................................................................................27 </P><P>Chapter 2: Function Improvements.................................................................................28 Improved Reverse and Undo while Reverse ................................................................................................28 Multiply-to-x and Insert-to-x CrossFunction Improvements .......................................................................28 Rounding for CrossFunctions ..............................................................................................................28 Forcing UnroundedMultiply while Rounding......................................................................................28 The Hidden UnroundedMultiplyReverse Function..............................................................................29 Undo Improvements.....................................................................................................................................29 Exiting from SamplePlay to Play with Undo ...............................................................................................29 Next-to-X CrossFunction Undo Improvement.............................................................................................29 Simultaneous Overdub.................................................................................................................................30 8ths/Cycle and Sync Parameter Changes Occur in Rhythm ..........................................................................30 </P><P>Chapter 3: Display ..........................................................................................................31 Visual Tempo and Sync Guide ....................................................................................................................31 SyncTime .....................................................................................................................................................32 Feedback and Continuous Controller Display .............................................................................................32 Command Display........................................................................................................................................32 Memory Size Display...................................................................................................................................32 </P><P>Chapter 4: New Parameter Settings ................................................................................33 Loop/Delay Parameter Settings....................................................................................................................33 Quantize Parameter Settings ........................................................................................................................33 Quantize = Loop ..................................................................................................................................33 Quantize = 8th.......................................................................................................................................33 Quantize = CYC...................................................................................................................................33 Quantize = Off .....................................................................................................................................33 8ths/Cycle parameter (8ths/Beat on older units) .............................................................................................33 Sync .............................................................................................................................................................34 RecordMode = Safe .....................................................................................................................................34 InsertMode...................................................................................................................................................34 MoreLoops...................................................................................................................................................34 LoopTrig......................................................................................................................................................35 SwitchQuantize............................................................................................................................................35 SamplerStyle................................................................................................................................................35 </P><P>Chapter 5: Synchronization.............................................................................................36 SyncRecord..................................................................................................................................................36 Global/Local MIDIclock..............................................................................................................................36 ReAlign........................................................................................................................................................37 The new ReAlign Function ..................................................................................................................37 Accessing ReAlign Functions from the Front Panel with Mute-Multiply............................................37 Accessing ReAlign Functions with MIDI ............................................................................................38 QuantMIDIStartSong (source# + 40)...............................................................................................38 MuteQuantMIDIStartSong (source# + 41) ......................................................................................38 MIDIReAlign ( source# + 38)..........................................................................................................38 MIDIMuteReAlign (source# + 39) ..................................................................................................39 BrotherSync and ReAlign ....................................................................................................................39 StopSync......................................................................................................................................................39 SyncStartPoint .............................................................................................................................................39 Tempo Select ...............................................................................................................................................40 StartSong, StopSong, and Continue.............................................................................................................40 If Sync = Out........................................................................................................................................40 If Sync = OutManualStartSong (OuS) .................................................................................................41 If Sync = IN .........................................................................................................................................41 Commanding a StartSong when Sync=In ....................................................................................................41 QuantMIDIStartSong...................................................................................................................................41 MuteQuantMIDIStartSong ..........................................................................................................................41 SongPositionPointer and ContinueSong......................................................................................................42 QuantStartPoint ...........................................................................................................................................42 AutoStartPoint .............................................................................................................................................42 8th/Cycle (8th/Beat on older units)...............................................................................................................42 Improved Sync Routings..............................................................................................................................43 BeatSync and Sync=IN ........................................................................................................................43 MIDI Clock in and BrotherSync..........................................................................................................43 MIDIclock out and Sync = IN..............................................................................................................43 Clock Piping ........................................................................................................................................43 </P><P>Chapter 6: MIDI Control.................................................................................................44 DirectMIDI and VirtualButtons...................................................................................................................44 VirtualButtons......................................................................................................................................44 DirectMIDI ..........................................................................................................................................44 Source# and LoopTrig Parameter Defaults Adjusted...........................................................................44 Expanded MIDI Commands List .................................................................................................................44 MIDI buttons .......................................................................................................................................44 New DirectMIDI commands................................................................................................................45 SUS MIDI Commands.................................................................................................................................45 SUSNextLoop..............................................................................................................................................46 PreviousLoop...............................................................................................................................................46 MIDI pipe ....................................................................................................................................................46 MIDI Data Wheel ........................................................................................................................................47 Sysex............................................................................................................................................................47 MIDI Sync Indicators ..................................................................................................................................47 </P><P>Chapter 7: Parameter Presets and Editing.......................................................................48 Presets..........................................................................................................................................................48 Selecting Presets ..................................................................................................................................48 Parameters saved in Presets .................................................................................................................48 Global Parameters not Changed by Presets..........................................................................................48 MoreLoops is a special case.................................................................................................................49 Understanding the Playing State “Preset”............................................................................................49 Selecting Presets from the Front Panel ................................................................................................49 Selecting Presets with MIDI Program Change.....................................................................................50 Preset Editor ................................................................................................................................................50 Accessing the Preset Editor..................................................................................................................50 Preset Editor Commands......................................................................................................................50 </P><P>Preset Editor Display ...........................................................................................................................50 Time Required for Saving Presets........................................................................................................50 Sysex Dump/Load........................................................................................................................................50 Sysex Individual Parameter Editing.............................................................................................................50 DataWheel ...................................................................................................................................................50 DataWheel Continuous Controller...............................................................................................................51 </P><P>Chapter 8: Sample Dump................................................................................................52 Introduction .................................................................................................................................................52 General Sample Dump .................................................................................................................................52 Connections .........................................................................................................................................52 Who starts sending? .............................................................................................................................54 Sample Number....................................................................................................................................54 Device ID.............................................................................................................................................54 Echoplex Sample Dump...............................................................................................................................55 Connections .........................................................................................................................................55 Who starts sending? .............................................................................................................................55 Loop Numbers and Sample Numbers ..................................................................................................55 Device ID.............................................................................................................................................55 Sample Dump User Manual.........................................................................................................................55 Sending a Dump(Dump-button)...................................................................................................................55 Sending &amp; Receiving (Upload-button) ........................................................................................................56 Button commands in Upload-mode......................................................................................................56 Commands received via MIDI .............................................................................................................56 Examples......................................................................................................................................................56 Echoplex A -&gt; Echoplex B ..................................................................................................................57 Echoplex A =&gt; Echoplex B .................................................................................................................57 Echoplex A =&gt; Echoplex B .................................................................................................................57 How long will it take?..................................................................................................................................58 The Other End..............................................................................................................................................58 Echoplex ......................................................................................................................................................58 SoundDesigner ®.........................................................................................................................................58 Echoplex -&gt; SoundDesigner ................................................................................................................59 SoundDesigner -&gt; Echoplex ................................................................................................................59 Alchemy ™..................................................................................................................................................59 Echoplex -&gt; Alchemy™.......................................................................................................................59 Alchemy™ -&gt; Echoplex.......................................................................................................................59 K2000 ™ .....................................................................................................................................................59 Echoplex -&gt; K2000™..........................................................................................................................59 K2000 ™-&gt; Echoplex..........................................................................................................................59 E-MU e64™ ................................................................................................................................................59 Echoplex -&gt; E-MU e64™....................................................................................................................59 E-MU e64™ -&gt; Echoplex....................................................................................................................60 Troubleshooting...........................................................................................................................................60 Display.........................................................................................................................................................60 Display for received messages .............................................................................................................60 Display for sent messages ....................................................................................................................60 Error values..........................................................................................................................................60 </P><P>Chapter 9: SYSEX Control Detailed Documentation.....................................................61 </P></Sect><Sect><H1 id="LinkTarget_508">Audience for the Upgrade Manual </H1><P>The LoopIV Upgrade Manual is intended for users who are upgrading their Echoplex from LoopIII to LoopIV. The intent is to explain the new features of LoopIV and how they work. It is assumed the reader is already familiar with existing functions and concepts from LoopIII, so they are generally not re-explained. You should refer to the LoopIII manual when you are unsure about an existing feature of Loop. In general, this is a reference manual and not an applications guide. </P><P>You may also wish to consult the Aurisis Research and Gibson Guitar Echoplex web sites for occasional manual updates and other useful information. at http://www.aurisis.com and http://www.gibsonechoplex.com. </P><P>Another good source of information is the Looper community at Looper’s Delight, http://www.loopers-delight.com. There you can find many other loopers and Echoplex users sharing tips and techniques. There is also an Echoplex FAQ and pages of tips from different users. </P></Sect><Sect><H1>New Feature Overview </H1><P>The following is a brief list of what is new about LoopIV. Please consult the following chapters for details about any given feature. </P><Sect><H3>New Functions and Features </H3><L><LI><Lbl>• </Lbl><LBody>Half Speed </LBody></LI><LI><Lbl>• </Lbl><LBody>SUS Commands – Real Time Granular Looping </LBody></LI><LI><Lbl>• </Lbl><LBody>Substitute </LBody></LI><LI><Lbl>• </Lbl><LBody>Feedback Display </LBody></LI><LI><Lbl>• </Lbl><LBody>Tempo Select </LBody></LI><LI><Lbl>• </Lbl><LBody>SyncRecord </LBody></LI><LI><Lbl>• </Lbl><LBody>Sync ReAlign </LBody></LI><LI><Lbl>• </Lbl><LBody>MultiIncrease </LBody></LI><LI><Lbl>• </Lbl><LBody>Record-to-NextLoop </LBody></LI><LI><Lbl>• </Lbl><LBody>LoopWindowing </LBody></LI><LI><Lbl>• </Lbl><LBody>LoopDividing • 16 Loops </LBody></LI><LI><Lbl>• </Lbl><LBody>New InterfaceModes – Stutter, Expert, Input, Replace, Flip </LBody></LI><LI><Lbl>• </Lbl><LBody>Parameter Presets </LBody></LI><LI><Lbl>• </Lbl><LBody>Expanded MIDI Control </LBody></LI><LI><Lbl>• </Lbl><LBody>DirectMIDI function access </LBody></LI><LI><Lbl>• </Lbl><LBody>SUS MIDI commands </LBody></LI><LI><Lbl>• </Lbl><LBody>MIDI SUSNextLoop </LBody></LI><LI><Lbl>• </Lbl><LBody>MIDI PreviousLoop </LBody></LI><LI><Lbl>• </Lbl><LBody>Sysex editing of Parameters and Presets </LBody></LI><LI><Lbl>• </Lbl><LBody>MIDIpipe </LBody></LI><LI><Lbl>• </Lbl><LBody>MIDI Note Sync Indicators </LBody></LI><LI><Lbl>• </Lbl><LBody>Simple Retrigger while Playing </LBody></LI><LI><Lbl>• </Lbl><LBody>NextOverdub </LBody></LI><LI><Lbl>• </Lbl><LBody>SimpleCopy </LBody></LI><LI><Lbl>• </Lbl><LBody>SmartButtons – MIDI “double-clicks” </LBody></LI><LI><Lbl>• </Lbl><LBody>QuantizeStartPoint </LBody></LI><LI><Lbl>• </Lbl><LBody>DataWheel </LBody></LI><LI><Lbl>• </Lbl><LBody>Improved Reverse </LBody></LI><LI><Lbl>• </Lbl><LBody>Improved Undo </LBody></LI><LI><Lbl>• </Lbl><LBody>Improved Multiply and Insert cross-functions </LBody></LI><LI><Lbl>• </Lbl><LBody>8th/Cycle and sync changes occur in rhythm </LBody></LI><LI><Lbl>• </Lbl><LBody>Improved SampleDump </LBody></LI></L></Sect><Sect><H3>New Synchronization Features </H3><L><LI><Lbl>• </Lbl><LBody>SyncRecord </LBody></LI><LI><Lbl>• </Lbl><LBody>Sync ReAlign </LBody></LI><LI><Lbl>• </Lbl><LBody>Local/Global MIDI clock StartPoints </LBody></LI><LI><Lbl>• </Lbl><LBody>Tempo </LBody></LI><LI><Lbl>• </Lbl><LBody>SongPositionPointer and ContinueSong </LBody></LI><LI><Lbl>• </Lbl><LBody>StopSync </LBody></LI><LI><Lbl>• </Lbl><LBody>SyncStartPoint </LBody></LI><LI><Lbl>• </Lbl><LBody>QuantMIDIStartSong </LBody></LI><LI><Lbl>• </Lbl><LBody>MuteQuantMIDIStartSong </LBody></LI><LI><Lbl>• </Lbl><LBody>QuantStartPoint </LBody></LI><LI><Lbl>• </Lbl><LBody>Improved Sync routings • 8th/Cycle up to 256 </LBody></LI></L></Sect><Sect><H3>New Parameter Values </H3><L><LI><Lbl>• </Lbl><LBody>MoreLoops = 16 </LBody></LI><LI><Lbl>• </Lbl><LBody>SwitchQuantize = Loop, ConfirmLoop, ConfirmCycle </LBody></LI><LI><Lbl>• </Lbl><LBody>SamplerStyle = Start </LBody></LI><LI><Lbl>• </Lbl><LBody>Quantize = Loop, 8th </LBody></LI><LI><Lbl>• </Lbl><LBody>Loop/Delay = Stutter, Expert, Input, Output, Replace, Flip </LBody></LI><LI><Lbl>• </Lbl><LBody>RecordMode = Safe </LBody></LI><LI><Lbl>• </Lbl><LBody>8th / Cycle up to 256 </LBody></LI><LI><Lbl>• </Lbl><LBody>Sync = Out and OutManualStartSong </LBody></LI></L></Sect><Sect><H3>New Display Features </H3><L><LI><Lbl>• </Lbl><LBody>Visual continuous control values for Feedback and Volume </LBody></LI><LI><Lbl>• </Lbl><LBody>Tempo LEDs </LBody></LI><LI><Lbl>• </Lbl><LBody>Sync LEDs </LBody></LI><LI><Lbl>• </Lbl><LBody>Command Display </LBody></LI></L><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P></Sect></Sect><Sect><H1>Installation </H1><Sect><H3>Installing LoopIV v1.1 EPROMs </H3><L><LI><Lbl>1. </Lbl><LBody>Before you start, please remember to be careful as you work. Changing the EPROMs is easy, but if you damage your Echoplex it is your problem. Aurisis Research is not responsible or liable for any damage you cause. If you do not feel comfortable following these instructions, find somebody who can help you. </LBody></LI><LI><Lbl>2. </Lbl><LBody>You’ll need a Phillips screwdriver, a small flat head screwdriver, the LoopIV software EPROMs, and a good surface to work on. </LBody></LI><LI><Lbl>3. </Lbl><LBody>To avoid damaging anything with static electricity, touch a grounded metal object to discharge yourself. If you have to stop part way through the following steps, make sure to ground yourself again when you resume work. Make certain the Echoplex is also properly discharged before you begin. The best way to do this is by connecting the power cord to a properly grounded wall outlet, and then disconnecting it. </LBody></LI><LI><Lbl>4. </Lbl><LBody>Unplug the power cord from the Echoplex. When changing the EPROMs, be careful not to touch other parts of the circuit, as some areas can hold a charge even after the power is off. When working around electronic devices, always practice the “one hand rule.” That means, use one hand to work at a time. If you do accidentally get a shock, it will only travel across your hand. </LBody></LI><LI><Lbl>5. </Lbl><LBody>Remove the screws holding the top of the Echoplex. There is one screw on the front at the upper right of the Gibson (or Oberheim) label, two screws on each side, and four screws across the back. Keep track of where each screw came from so you can put it back in the same place later. </LBody></LI><LI><Lbl>6. </Lbl><LBody>Pull the top off. Put it aside. </LBody></LI><LI><Lbl>7. </Lbl><LBody>The current EPROMs are the two chips in sockets just behind the memory SIMMs. They will be the same size as your new chips and have labels saying either “LD 3.32 ODD Master” and “LD 3.32 Even Master” or “LoopIIIv5.0 Even” and LoopIIIv5.0 Odd.” If the labels have come off or it is not clear which are the correct chips, the reference designators on the PCB are U34 and U35. </LBody></LI><LI><Lbl>8. </Lbl><LBody>Carefully remove the EPROMs from the sockets with the flat head screwdriver. Do this by inserting the flat part of the screwdriver between the body of the IC and the socket, and gently rocking back and forth to lift the pins out. Switch sides to make sure it comes out evenly.  Be very careful so that you don’t bend the pins. When it comes loose, lift it out and put it aside. Do the same with the other one. This should not require a lot of force. If the chips do not lift up easily make sure you are working with the correct chips and have the screwdriver tip between the chip and socket. </LBody></LI><LI><Lbl>9. </Lbl><LBody>Take the new EPROMs out of the protective packaging. Put the old ones in the package to keep them safe. </LBody></LI><LI><Lbl>10.</Lbl><LBody> The EPROM labeled “Even” goes in the socket labeled “Even” on the PCB, U34. The one labeled “Odd” goes in the odd socket, U35. With the front of the unit towards you, the notch on the top of the chip should be towards the left side of the unit, away from the transformer. The text on the label should be right side up. Carefully press the IC’s into the sockets, making sure all the pins are going in correctly. </LBody></LI><LI><Lbl>11. </Lbl><LBody>Put the top back on, replace the screws in all locations, plug in the Echoplex. </LBody></LI><LI><Lbl>12. </Lbl><LBody>Hold the Parameter button down, and turn the power on. You should see “Loop 4” scrolling across the display. At that point you can release the Parameter button. This initializes the parameter memory correctly for LoopIV, and sets all Parameters to default values. </LBody></LI></L><P>That’s it! </P></Sect></Sect><Sect><H1 id="LinkTarget_509">Chapter 1: New Loop Functions </H1><Sect><H3>Half Speed </H3><P>Half Speed is a new function that switches the playback speed of the loop to half the normal speed, making it an octave lower and twice as long. Half Speed is a new InsertMode option, making it available from the front panel. Half Speed is also available by MIDI. </P><P>When the new value H.SP. is selected in InsertMode, the Insert Button becomes the Half Speed button. Pressing it switches the current loop an octave lower, to half speed. The insert LED turns red and the display says H.SP briefly. Press Insert again and the loop returns to Full Speed. The LED turns green and F.SP is displayed for a moment. </P><P>The function is reset to Full Speed with Reset, but it can be selected while still in Reset. This allows you to start a loop in Half Speed with the audio sounding normal, and then switch to full speed. It ends up as double speed, one octave higher! </P><P>All other functions work normally in Half Speed. The speed can be switched anytime during playing or Reset, even while in the middle of overdubbing or multiplying! So as you are overdubbing you can switch freely between Half Speed and Full Speed to get interesting octave and speed jumps in the middle of the overdub. </P><P>The sound quality is somewhat reduced during Half Speed because the sampling rate for the audio is cut in half. Also note that MIDI piping is slowed down by half speed, so it is possible to see to see slight delays in very dense MIDI streams. See the MIDI chapter below for more details on MIDIpipe. </P></Sect><Sect><H3>SUS Commands – Real Time Granular Loops </H3><P>Another new value on the InsertMode parameter is called SUS. This is short for Sustain. </P><P>SUS changes the way in which the Insert and Multiply buttons work. It turns Insert and Multiply into Unrounded functions with Sustain action on the button. In other words, they start when the button is pressed and end immediately when it is released, just like Record or Overdub = SUS always did. When the function ends it does so as if Record had been pressed as an alternate ending to the Insert. This is what we call an “Unrounded” multiply or insert, because instead of rounding off to the next Cycle point it is ended immediately and the loop time is redefined. </P><P>With Quantize = OFF, the effect of SUS with Multiply and Insert allows you to splice together fragments of sound into a loop. One use of this is to create short loops and splice short &quot;granular&quot; sounds together in real time by tapping on the multiply or insert buttons as sounds are played into the input. If you hold the button down, the Multiply or Insert goes on as long as you hold it, but if you just tap the button lightly the functions will only be active for as long as the switch is contacting. This can be as short as a few milliseconds, allowing you to splice together very short fragments. Combine InsertMode=SUS with RecordMode=SUS and OverdubMode=SUS, as well as the new MIDI commands to access other functions as a sustain action. (like ReplaceSUS and SubstituteSUS). SUS techniques give exciting new timbres and glitch effects, all created in real-time. Real-Time Granular! </P><P>With other Quantize values the SUS versions of Insert and Multiply start and stop quantized. There will always be an Insert or Multiply of at least one time period as determined by the quantize setting (Loop, Cycle or 8th). Even if you quickly tap the button such that it is actually released before the start of the function, you will still get one time period worth of the function. This is very useful when working with short loops where it is important to maintain a rhythmic length. With SUS you can get much quicker Inserts and Multiplies than you could if you had to press the button twice. Note that this quantized behavior is true with other SUS functions, like Replace and Substitute. </P><P>With Quantize = CYC it's easy to create rhythmic sequences of sounds when using SUS commands. </P><P>With Quantize = 8th a short press of Multiply will change the loop length to one Cycle divided by the value of 8th/Cycle. </P></Sect><Sect><H3 id="LinkTarget_510">Substitute </H3><P>The New Substitute Function </P><P>Substitute has some similarity to the Replace function that we had from LoopIII. With Replace the original loop playback is cut while the replace is done. So while you are playing something new to Replace what was there, you don’t hear the old loop. Replace is useful when the new material would clash with what was there, but oftentimes the result not very tight since you don’t have any guide to play along to as you are doing the Replace. </P><P>With Substitute the original loop playback continues while you are playing the new material. On the next repetition, only the new audio will remain in the loop and the old portion will be removed. This helps keep the groove going while substituting and gives you something to play along to, as well as giving an overlap between the old portion and the new portion for continuity. Substitute is the same as if you were doing an Overdub with the feedback turned down to zero only during the Overdub. </P><P>Using Substitute </P><P>Substitute can be used in several ways: </P><L><LI><Lbl>1. </Lbl><LBody>an Insert button press when InsertMode=Sub </LBody></LI><LI><Lbl>2. </Lbl><LBody>a LongMultiply (less accurate, see below) </LBody></LI><LI><Lbl>3. </Lbl><LBody>a Record-Insert combination when InsertMode=rhr. (formerly called Rehearse) </LBody></LI><LI><Lbl>4. </Lbl><LBody>the Substitute VirtualMIDI button </LBody></LI><LI><Lbl>5. </Lbl><LBody>the SUSSubstitute DirectMIDI command </LBody></LI></L><P>As long as Substitute is active, all playing is repeated once. This can be useful to find the groove to start a loop. Just hold Substitute down as you play, and when you’ve played something you like let it go! </P><P>When Quantize is Off, Substitute is an instant function with Sustain action, same as Replace. This means it is active while the Insert button is pressed down and turns off when you release the button. </P><P>When Quantize is on, pressing Substitute down puts the Echoplex into the waiting state until the next Cycle point. Once the substitute starts, releasing it also goes into a waiting state until the next Cycle or loop StartPoint is reached. If you simply tap the Substitute button, it will be active for exactly one Cycle. </P><P>There is a problem when you try to use Substitute with the LongMultiply option. During the first 400ms until the switch action is detected as a long press, it’s treated like a Multiply. This means the old loop is still present for those 400ms, and only after that it mutes for the substitute. If you have quantize on you will not have this problem, since the long press can happen completely during the ooo waiting phase. When the Cycle point comes Substitute is started directly. </P><P>Advanced Use of Substitute </P><P>If a Feedback Pedal is connected and you are using some of the new InterfaceModes, Substitute has some extended functionality that makes it even more powerful. StutterMode and ReplaceMode have this capability. While the pedal continues to do Feedback during normal playing, the front panel Feedback knob controls the feedback just for the Substitute function. So you can have different settings for each! If you have the FeedBack knob all the way up, The existing audio is completely preserved as you are adding more. So it turns into Overdubbing. With the Feedback knob turned all the way down, the existing audio completely disappears on the next repetition, so it is the normal Substitute. In between is where it is interesting, because you can choose how much the level of the existing audio should decay each time you do an &quot;overdub&quot; with Substitute. In ReplaceMode the loop output level is also set to 100% during Substitute instead of being set by the Pedal as it is otherwise. See the section on the new InterfaceModes for more details. </P></Sect><Sect><H3>SyncRecord </H3><P>SyncRecord is a variation of Record that is done when a Sync of any type is being received and Quantize is off. Instead of always quantizing Record when a sync is coming in as was done in LoopIII, we now do a kind of “Multiply over nothing” for the unquantized case. This means SyncRecord starts immediately when you press Record, counts the Cycles on the green display, and rounds at the end to fit the loop time defined by the sync. SyncRecord gives freedom from quantization, while still allowing tight synchronization to an external clock source. </P><P id="LinkTarget_511">During Reset, the Overdub LED turns yellow to indicate that a Sync arrived. When the second Sync point arrives to define the loop length, the display shows the resulting Cycle time. Whenever the Overdub LED is yellow like this, the next Record press will be a SyncRecord. </P><P>With SyncRecord, you only need to have received the first sync event to begin Recording. As you are Recording, the Echoplex will continue watching the sync to determine what the right cycle times are. </P><P>SyncRecord does make one improvement when Quantize is on. In LoopIII, as a loop was recorded in sync the cycles would not be counted or differentiated. Now the Cycles are tracked and counted properly. This means that if the incoming clock defines a Cycle length of 2 seconds and you let Record continue to 8 seconds, you will see the multiple counter counting from 1 to 4. The Cycle boundaries will be set at 2.0 seconds. In LoopIII it would have just made a big 8 second cycle. This is especially useful now since the Quantize function can quantize to either the Cycle boundaries or the Loop StartPoint. </P></Sect><Sect><H3>Tempo Select </H3><P>Tempo Select is a way to set up the tempo of a loop in Beats Per Minute (BPM) before you record it. Once you set the BPM, the basic loop length is determined by the 8ths/Cycle parameter. You can also think of this as setting the loop time ahead of recording the loop. </P><P>The tempo is set with the FeedBack knob or by MIDI.  While still in reset and before a loop is recorded, you enter the Tempo state with a press of the Undo button. From there you can set the Tempo. </P><P>After setting the tempo the loop can be recorded. When you press Record, the Echoplex actually does a SyncRecord to the clock tempo that has been set. (See the SyncRecord section above or in the Sync chapter for more details on SyncRecord). This allows you to start the Record at any time. When you press Record again to finish, it will continue to the precise loop time determined by your tempo and the 8ths/Cycle parameter, and end the Record automatically. </P><P>Once the tempo is set in the Tempo state, MIDI clock is sent out. This allows you to start a sequencer or drum machine in time with your loop length before you even record the loop! Or similarly, it allows you to start a sequencer at the exact time you start recording a loop, instead of when you finish it! Tempo Select gives you a lot more flexibility for working with sequencers and other synchable devices over what was possible with LoopIII. </P><P>How to Use Tempo Select </P><P>Tempo Select requires that the Sync Parameter be set to Out or OuS. When you have Sync set to Out or OuS, the Undo LED will be green in reset to indicate the Tempo function is available. </P><P>To select the Tempo, first press the Undo button in Reset. This will put you into the Tempo Select State. From there you will see the display change and you will have several different commands available from the front panel. </P><P>The Tempo Select Display </P><P>When you enter the Tempo State, the Undo LED will turn red and the BPM will appear on the LoopTime display. The tempo LEDs will begin flashing to the beat. You will also see that the Record LED is green and the Overdub, Insert, and Mute LEDs will be Orange to indicate they have special functions. </P><P>Tempo Select Commands Record – record a loop in tempo. It will automatically do a SyncRecord to the selected tempo. </P><P>Overdub – Press to disregard the Tempo without erasing it.  If you press it again later or reenter the Tempo Select function, the tempo returns. </P><P>Feedback Knob – sets the Tempo. </P><P>Insert and Mute – use to fine tune the tempo. </P><P>Short press of Undo – locks the tempo and triggers a StartSong message. </P><P>Long press of Undo – exits from the Tempo Select state and switches the feature off. Any time a tempo has been set, a Long Undo during reset will clear it. </P><P>Setting the Tempo </P><P>Select the tempo with the FeedBack knob. You can select a tempo between 26 and 278 BPM. Tempo can also be set by MIDI using the DataWheel continuous controller. (controller #6) </P><P>While the knob is being turned, the Tempo is displayed in BPM on the LoopTime display. Once you’ve stopped turning it for a moment, the resulting loop time is displayed in place of the BPM. The loop time depends on Tempo and the 8th/Cycle parameter. We assume that a beat is a quarter note, so at Tempo 120 BPM and 8th/Cycle=8, the Cycle time results in 2.0 seconds. If 8th/Cycle is 16, you get 4.0 seconds, and so on. </P><P>With the feedback knob the tempo is adjusted coarsely, in 2 BPM increments. The Insert and Mute buttons can be used to fine tune the tempo from there. Insert reduces the LoopTime (increase BPM) and Mute increases the LoopTime (reduces BPM). Each press changes the loop time by approximately 3 milliseconds. Fine tuning changes are not shown in BPM, it only changes while the LoopTime is displayed. Unfortunately, the LoopTime usually shows the time in 100ms resolution! So you might not be able to see anything change on the display as you fine tune the tempo, until you have changed it by 100ms. But you can hear it. Since the MIDI clock is being sent out during this time, any device following the clock will be slowly changing in tempo as it follows the fine tuning. </P><P>A long press of Undo clears the Tempo and exits from Tempo Select. </P><P>Differences Between Sync = Out and Sync = OuS </P><P>Tempo Select behaves slightly differently depending on whether the Sync parameter is set to Out or OuS. With Sync = Out, StartSong messages are sent when you start Recording or when you Set the tempo with Undo. When Sync = OuS, StartSong is only sent at user command with the press of Undo in the Tempo Select state, but not sent when you start or stop Recording. If you have recorded a loop without StartSong, you need to do one of the new Quantized StartSong functions to send a StartSong message. This can give you more freedom in controlling when the sequencer starts. </P><P>See the Synchronization chapter for more details on the differences between Out and OuS. Details on the Quantized StartSong functions can be found in the Synchronization chapter and in the MIDI chapter. </P><P>MIDIclock and StartSongs </P><P>MIDIclock is sent out immediately when you enter the Tempo state, but without a StartSong message. Some devices like to have MIDI clock in advance, and for some cases this allows you to get a feel for the rhythm. But to really start things, you need to send a StartSong message! </P><P>Recording in Tempo </P><P>There are three ways to send the StartSong and get things started: </P><P>1. Start up the sequencer before recording any loops </P><P>The first option for starting the sequencer is to start it in tempo before recording any loops. After you have entered Tempo Select and set the Tempo, press Undo again. This press of Undo sends a StartSong message to the sequencer and locks in your tempo. We call it SetTempo. The sequencer will receive the StartSong message and start playing at your tempo using the MIDI clock out from the Echoplex, and the Echoplex and sequencer will be aligned from then on. If you don’t like the tempo you can press Undo to set it again with the feedback knob or the fine tune buttons. This StartSong is sent if sync is OuS or Out. </P><P>If you are not using a pedal for feedback, make sure you set the feedback knob back to where you want it for feedback before recording! Since you have locked the tempo, changing the knob position at this point will not change tempo, only feedback. You may also find the new RecordMode=Safe parameter helpful here. </P><P>Whenever you are ready to record your loop, you can simply tap record to begin. You will actually do a SyncRecord. After the second press of record to end recording, the Echoplex will round off the recording to the next sync point as determined by your tempo. Your loop will end at exactly the right length and in time with the sequencer. </P><P id="LinkTarget_512">2. Start up the Sequencer as you begin Recording your Loop </P><P>The second option for starting the sequencer is to trigger it immediately as you start Recording. You can do this by pressing Record directly when the Undo LED is still red, right after you have dialed in the tempo. A StartSong message is sent, and the sequencer will start at the same instant as you start recording your loop. In this case the press of Record is the SetTempo moment. When you press Record again to finish, the Echoplex rounds off the recording to the correct loop time, same as before. For this to work you have to have Sync = Out. </P><P>3. Record a Loop and Start the Sequencer Later </P><P>The third option lets you Record a loop without starting up the sequencer. This requires the Sync parameter to be set to OuS. Set the tempo in the tempo state, and then record your loop to it as above. With OuS, the StartSong message is not sent out when Recording is started or stopped, so the Sequencer will not start up. When you are ready to start the sequencer, you need to send a StartSong message with the QuantStartSong command executed by pressing Mute and then Multiply while the loop is playing. At the next StartPoint of your loop a StartSong message will be sent automatically and your Sequencer will start. You can also use one of the MIDI StartSong commands which don’t necessarily require you to mute your loop first. More details about the quantized StartSong commands can be found in the Synchronization chapter and the MIDI chapter. </P><P>SetTempo and Presets </P><P>The SetTempo moment when the tempo is locked in is important. At SetTempo the tempo you have defined with the feedback knob is stored as a parameter value in memory. You can then save it as a preset and recall it again later. This allows you to have predefined tempos stored in different Presets and jump to them immediately. See the Presets section for more information on Presets. SetTempo also means that the tempo is remembered if you go out of tempo and then come back. For example, after SetTempo and while still in Reset you press Overdub to disable sync. At that point you can record a loop out of sync if you like. After reset, press Overdub again to re-enable sync, and then press Undo again to go back into the Tempo state. Your old tempo is still there! </P><P>Sync=In and Sync=Off </P><P>If Sync=IN, the Tempo Select function can not be selected. The Undo LED is actually orange, indicating an alternate function. In this case a different function is available, where StartSong can be sent in Reset with a press of Undo. See the Synchronization chapter for more details on this. </P><P>If Sync = Off, Tempo Select is not available and StartSong messages are not sent. The Undo LED is off. </P><P>Storing Tempo in Presets </P><P>Tempo can be saved in a Preset. Whenever you recall that preset it will immediately come up with that tempo. To do this, you simply save to a Preset while you have a tempo set, and it will be stored. See the Presets section for more information on how to save and recall presets. </P><P>When you recall a preset where no tempo has been set, it is just as if this feature did not exist at all. It comes up without any tempo and behaves normally. </P><P>When the Tempo state is activated with Undo, it first displays the tempo value in the preset currently loaded. </P><P>If there is no tempo saved in the current preset, it defaults to 120BPM. From then on, as soon as the Feedback knob is moved, the new values is activated. </P></Sect><Sect><H3>MultiIncrease </H3><P>Multiply now has a feature to aid in creating very long multiplies, called MultiIncrease. MultiIncrease is also useful when you know exactly how many multiples you want to do in advance. Instead of waiting until the end of the multiply to make the second button press, now you can immediately tap in as many Multiples as you want in the beginning of the multiplying. The Echoplex will automatically complete that many multiply Cycles for you. This same function is also available for Insert, however for simplicity we will just describe it in terms of Multiply. </P><P id="LinkTarget_513">MultiIncrease is very helpful for situations where you want to have a large number of multiples and you don’t want to wait to the very end to remember to press Multiply a second time. This way you can set up in advance how far it will multiply and let it go while you continue playing. MultiIncrease is in addition to the normal Multiply operation, so the traditional use is not affected. </P><P>How to Use MultiIncrease </P><P>Once you have started multiply, immediately tap the multiply button again to signal you want to end. The Echoplex begins Rounding off the multiply, just as it always has. During the Rounding period, continue tapping Multiply to increase the number of Cycles you want to add. The number of Cycles where Multiply will be stopped is briefly displayed as C&lt;number&gt; while you are tapping them. If you like, you can tap them in very quickly right from the beginning. Or, if you have had multiply going for a while, using MultiIncrease simply adds to the number of multiples you already have. </P><P>If you are tapping the Cycles in quickly, it is helpful to remember that the first tap of Multiply is just starting it. The second tap is where you start counting the total number of Cycles you will get. This can throw you off when you count the Multiply taps quickly, because you need to tap one extra time than the number of Cycles you want. So if you want 4 Cycles total, you need to tap five times. You might count it start – 1 – 2 – 3 – 4. </P><P>Example </P><P>-Record a loop. </P><P>-Tap Multiply 4 times and you get: Tap 1: Start Multiply Tap 2: Stop Multiply, begin Rounding Tap 3: MultiIncrease (Cycles = 2) Tap 4: MultiIncrease (Cycles = 3) </P><P>-You’ve set it to Multiply by 3 </P><P>-At the third Cycle, the multiply will stop automatically. </P><P>MultiIncrease with Quantize=Loop </P><P>When Quantize=Loop, MultiIncrease adds entire loops. For example, if the loop consisted of 4 Cycles, MultiIncrease counts C 8, C12, C16, etc. </P></Sect><Sect><H3>MoreLoops up to 16 </H3><P>There are 16 loops available now, instead of 9 as in LoopIII. On the Loop display the numbers above 9 are shown with letters, due to the lack of a leading 1. So they go 1, 2, 3…9, A, b, c, d, E, F, G. </P></Sect><Sect><H3>New SwitchQuantize Values </H3><P>SwitchQuantize has three new values that add quantizing to the loop and mix the idea of Confirm with the idea of Quantize. </P><P>Loop (SwitchQuant = LOP) </P><P>Jumps to the chosen loop at the next loop end. Useful when multiplies and inserts have been done. </P><P>Confirm Cycle (SwitchQuant = CCY) </P><P>Similar to Confirm. (SwitchQuant=CnF). After a confirming action is done, it additionally quantizes to the next Cycle point. </P><P>Confirm Loop (SwitchQuant = CLP) </P><P>Similar to Confirm. (SwitchQuant=CnF). After a confirming action is done, it additionally quantizes to the next Loop StartPoint. </P><P>An example for Confirm Cycle (CCY): </P><L><LI><Lbl>• </Lbl><LBody>Have two loops recorded. </LBody></LI><LI><Lbl>• </Lbl><LBody>Press NextLoop, it waits for you to do some action. </LBody></LI><LI><Lbl id="LinkTarget_514">• </Lbl><LBody>Press the function you want (Record, Overdub, Multiply, Insert, etc...) </LBody></LI><LI><Lbl>• </Lbl><LBody>The action will begin in the new loop after the next Cycle point of the current loop. </LBody></LI></L><P>Confirm Cycle and Confirm Loop also give you an alternate quantize type for operation in the current loop: </P><L><LI><Lbl>• </Lbl><LBody>You are in loop number 1 </LBody></LI><LI><Lbl>• </Lbl><LBody>Press NextLoop until next loop number 1 is displayed </LBody></LI><LI><Lbl>• </Lbl><LBody>Any operation will begin according to the Confirm setting, regardless of the Quantize parameter. You can even start Overdub quantized this way! </LBody></LI></L></Sect><Sect><H3>LoopDividing </H3><P>The Quantize parameter has an important new value, 8th,. With Quantize=8th, functions execute at subdivisions of the loop Cycles, giving us LoopDividing. </P><P>The 8th/Cycle parameter normally determines how the loop is divided. For example, if 8th/Cycle = 8 the subdivisions are on 8th note boundaries of the Loop time. If 8th = 4, the subdivisions are on quarter notes. With the new values available in the 8th/Cycle parameter, you have a wide range of options for dividing your loop. </P><P>The exception is when Sync=In and a MIDI clock is being received. MIDI clock specifically defines 8th notes, so the MIDI clock information is used for Quantizing to 8th notes in this case. </P><P>LoopDividing appears simple at first, but offers powerful new techniques when combined with other functions. For example, Replace and the new Substitute function can be used to easily change exactly one eighth note in a loop. Or you can execute Reverse aligned to the nearest quarter note, which feels almost immediate but keeps your loop in tempo as you switch in and out of Reverse. </P><P>See the New Parameter Settings chapter for more details on the new options for Quantize and 8th/Cycle. </P></Sect><Sect><H3>New SamplerStyle Options </H3><P>SamplerStyle is a parameter that affects how multiple loops are triggered by MIDI or the NextLoop button. A new option called Start has been added, and several of the other options have been improved. </P><P>SamplerStyle = Start (StA) </P><P>Start is a completely new value for SamplerStyle. It makes the new loop start from the beginning and play forever. This is true whether the loop is entered with NextLoop or triggered by MIDI. </P><P>SamplerStyle = Once (OnE) </P><P>Once gained an important new functionality over what it had in LoopIII. It still triggers the loop from the start, plays it once, and then goes to Mute when the loop is triggered by MIDI. </P><P>However, with the NextLoop button it now plays the next loop once and then returns to the previous loop automatically. This is very helpful as a way to improvise the form of your music. You could have the ‘A’ section looping in Loop 1, and at some point decide you want the ‘B’ or ‘C’ section to drop in for one repetition before returning to the main loop. With SamplerStyle = One you can do this with one press on NextLoop and let the Echoplex take care of everything for you. </P><P>There are a few differences in functionality while the new loop is playing once: </P><L><LI><Lbl>• </Lbl><LBody>Undo: If you decide you want to stay in the new loop instead of bouncing back, you just have to press Undo while it is playing the single repetition. Instead of bouncing back to the first loop when it reaches the end, it will keep repeating the new one. </LBody></LI><LI><Lbl>• </Lbl><LBody>Mute: if you press Mute during the second loop, it will Mute and stay in that loop. </LBody></LI><LI><Lbl>• </Lbl><LBody>Insert: If you press Insert while the second loop is playing, it will retrigger. You can retrigger it as much as you like, and when you let it go to the end it will return to the first loop. </LBody></LI><LI><Lbl id="LinkTarget_515">• </Lbl><LBody>Multiply: Multiply is not available while the second loop is playing. </LBody></LI><LI><Lbl>• </Lbl><LBody>Overdub: If you turn on overdub while the second loop is playing, it will be assumed that you want to make some change to the new loop and it will not switch back to the first one. If you have SwitchQuantize on and press Overdub while you are still waiting for the first loop to finish, Overdub will be on when you go to the second loop. Again, it will not return to the first loop after it is done, and the overdub is kept. </LBody></LI><LI><Lbl>• </Lbl><LBody>Next: Next is interesting. If you press NextLoop again while the second loop is playing, you will go to a third loop. When the third loop is finished playing once, it returns to the second loop. When the second loop finishes playing one more time, it returns to the first loop! So you can stack up a sequence of jumps and then return to the beginning, all automatically! There is a limit to this, in that you can’t NextLoop through the same loop several times and automatically jump back to it that many times. It will stop the first time it returns to that loop and ignore previous steps in the sequence. </LBody></LI><LI><Lbl>• </Lbl><LBody>Record: If you press Record while the second loop is playing, you will record a new one. It will continue repeating instead of jumping back to the first loop. </LBody></LI><LI><Lbl>• </Lbl><LBody>AutoRecord: If the loop you jump to with Once is in reset and AutoRecord is on, you record the B part and immediately jump back to the previous loop when you tap Record to finish. If you press some additional function during recording for an alternate ending (like Multiply or Insert), it will go ahead and do that function and stay in the second loop. There is a limitation with AutoRecord and several loops. If you use AutoRecord to record several loops it will only jump back one loop at the end instead of jumping back through all of them. </LBody></LI><LI><Lbl>• </Lbl><LBody>LoopCopy and TimeCopy: If you have LoopCopy on or if you engage a LoopCopy by pressing Multiply, Insert, or Overdub when using SwitchQuantize to change loops, the copy will be made into the new loop. When you finish the copy with a press of Multiply (or Insert) it will jump back to the first loop. This is an interesting way to make copies into a new loop and not necessarily listen to it repeat immediately. </LBody></LI><LI><Lbl>• </Lbl><LBody>Similarly, if you press any additional function during the quantizing period, it does not switch back to the previous loop. The Echoplex assumes you want to elaborate on the B part. </LBody></LI></L><P>SamplerStyle = Attack (Att) </P><P>The existing SamplerStyle value Attack only makes sense when loops are triggered by MIDI. This gives a keyboard like “play as long as you press” function, but it never made sense with NextLoop. So now when the NextLoop button is pressed (or MIDI- NextLoopButton), it is the same as “run”. The loop starts in the same place where you last left it. If you used SamplerStyle=Att with LoopIII to make the new loop restart, you should now use SamplerStyle=STA. </P><P>SamplerStyle = Run (run) </P><P>Run is unchanged from LoopIII. With NextLoop or with MIDI triggers, you enter the loop at the last point where it was left. </P></Sect><Sect><H3>Record-to-NextRecord </H3><P>Many users requested the Record-to-NextRecord function. With multiple loops set up, you can now end recording with a tap of NextLoop and jump immediately to the next loop. </P><P>If Sync is being used, the recording will be rounded first and it will jump quantized at the Sync StartPoint. </P><P>If AutoRecord is on, the Echoplex immediately continues recording in the new loop. This is especially useful for filling the loops with the various parts of a song while playing continuously. You just keep pressing Next as you play! Similarly you can have LoopCopy set to Sound or Time, and it will automatically copy from one loop to the next as you press NextLoop. </P><P>When MoreLoops is 1, ending Record by pressing Next does a stop Record and begins playing the loop, just as if the recording had been ended with another press of Record. Note however, that when MoreLoops = 1, NextLoop becomes a retrigger button, so Record-to-Next can be an interesting way to immediately go into stutters of your loop. </P></Sect><Sect><H3 id="LinkTarget_516">LoopWindowing </H3><P>LoopWindowing originally started as an obscure bug in the LoopIIIv5.0 software. People liked it so much they insisted we not fix it, and instead turn it into a feature! The “bug” has now been cleaned up to work predictably and in a consistent manner with other functions. So now it really is an interesting function that we call LoopWindowing. </P><P>Understanding LoopWindowing </P><P>LoopWindowing lets you define a short segment, or Window, out of a longer loop and let that short segment repeat as a loop. This Window is defined on the fly, in real time. You then have the ability to move that window through the larger loop as it exists in memory. In fact, it is more than just moving the window over the loop as it currently exists, you really move back through the memory, through all of the changes that have been recorded by overdubbing and multiplying and whatever. It stops when you reach the very initial point where the first tap of Record happened. LoopWindowing can give a variety of interesting effects, depending on the size of the Window and how much material is in the memory to Window through. You can even resize the Window on the fly, to capture different sized chunks of memory! </P><P>Creating the LoopWindow </P><P>The LoopWindow is created by either re-multiplying a loop or doing an Unrounded Multiply. Both of these are standard techniques that were possible in past versions of Loop. Re-Multiplying is done on a loop that has already had Multiplies or Inserts done on it, so you can see the Multiple display counting the cycles. If you press Multiply again on this loop, and then end it somewhere before the end of the loop, you will get a new loop of just that section. In this case it will be neatly rounded off to the previous cycle length. This technique allows you to chop out Cycles from the larger loop. You may want to experiment with setting Quantize to Cycle or 8th as a way to get rhythmically aligned LoopWindows. </P><P>Unrounded Multiply is when you start a Multiply on a loop, and then end it with a press of Record. Instead of rounding off the cycle, it will stop immediately and redefine the new loop length at exactly that point. Unrounded Multiply is a great way to change rhythms by chopping out a completely new loop lengths. Using the new InsertMode=SUS function is also an interesting way to create Unrounded Multiples. </P><P>Either one of these techniques let you chop out a segment of your loop, either maintaining rhythm or not depending on what you want to do. </P><P>Moving the LoopWindow </P><P>Once a LoopWindow has been defined, we can move it backwards through the loop memory by pressing Undo. With each Undo press, the LoopWindow jumps back in memory by the size of the window, and then loops over that section. You can continue moving the window backwards to the point where the initial loop was started with the first tap of Record. If a Reverse has been done on the loop, then you can only move it back to the point of the Reverse. </P><P>Moving the LoopWindow works in the same way as Undo works, so it is useful to understand the distinction between a ShortUndo and a LongUndo. (Check the original Echoplex manual for more discussion on Undo.) Basically, a long-press of Undo will jump you back a complete LoopWindow length before your current window, and is the most obvious to use. A short-press of Undo sets the LoopWindow to end at the spot where you press it and begin a LoopWindow length before that. </P><P>For example: if you redefine the length of the LoopWindow from 8 seconds to 2 seconds, and then tap Undo at 1.5 seconds, it is only the last .5 seconds that change in that window. The previous 1.5 seconds of the Window remain intact in the new Window after that initial Undo button press, except they will now be coming at the end of the LoopWindow. Your new loop will start .5 seconds before the previous LoopWindow StartPoint, and end at the 1.5 second point where you tapped Undo. </P><P>Using ShortUndo is more complicated to understand, but is also more flexible. If you want to scroll through different sections of the loop cleanly with ShortUndo, press Undo right at the beginning of the window. This way you will really jump back a whole Window length. If you hit Undo somewhere within the boundaries of the window, you'll find that you get a blend between different memory window sections, with that blend happening at the exact point you hit Undo. So the timing of the Undo button press becomes a powerful tool for playing with the distinction between window fragments. It is especially powerful in rhythmic loops. </P><P id="LinkTarget_517">Modifying the LoopWindow </P><P>You can define new LoopWindow sizes at any time by doing more Re-Multiplies or Unrounded Multiplies, and then move the new LoopWindow over the loop. </P><P>Once you have a LoopWindow defined, you can do any other loop function on it that you like. For example, you can overdub new material onto it. Pressing Undo after that will first remove the overdubs, and then begin jumping backwards through memory of the larger loop. </P></Sect><Sect><H3>Retrigger while Playing </H3><P>When MoreLoops = 1, the otherwise unused NextLoop button turns yellow and does a Retrigger function. When you press it, the current loop will retrigger from the start, and then continue looping. This is similar to doing Mute-Undo to retrigger a loop, but without silence from having to mute first! This is only available when you have one loop set up in MoreLoops, since the NextLoop button obviously changes loops otherwise. There are also new MIDI commands available for Retriggering loops, so if you need to Retrigger when you have multiple loops set up you should consider those. Details are in the MIDI chapter. </P></Sect><Sect><H3>InterfaceModes – New Loop/Delay Parameter Values </H3><P>The Loop/Delay parameter determines how feedback, loop input volume, and loop output volume are controlled during various states. The parameter affects how you interact and control the loop, and different settings will be more or less useful to different players and different styles of looping. We call these InterfaceModes. Basically, InterfaceModes reroute the control signals from the feedback knob on the front panel and the feedback pedal input on the back, and determine when they are active and which parameters they control. In some cases these settings end up affecting Insert in interesting ways as well. </P><P>There were only three settings before – Loop, Delay, and Out. Loop has always been the default setting and most people use it. DelayMode is there to give a familiar style of operation to people accustomed to using delays. OutMode was only available if a pedal was inserted in the Feedback Pedal jack, and is really just like LoopMode but with Loop Output level controlled by the pedal while feedback was controlled by the knob. </P><P>Now we have added several new options to allow new ways to interact with the loop, for a total of eight. Four of the InterfaceModes are available at any time, and four require a pedal to be inserted in the Feedback Pedal jack. Those four are not visible in the parameter selection unless the pedal is connected. </P><P>These InterfaceModes are really expert functions, for experienced users to find subtle new ways to interact with loops. For newer or less experienced users, we recommend that you stay with LoopMode until you feel ready to experiment with the other InterfaceModes. </P><P>LoopMode  (Loop/Delay = LOP) </P><P>LoopMode is the default setting for the Loop/Delay parameter, and is the most common way of using the Loop. This is the InterfaceMode we recommend people to start with, and most people stay with it. In LoopMode feedback control is always active, whether overdubbing or not. Feedback is controlled by the front panel knob if there is no pedal inserted, or by the pedal if it is there. Input or Output levels are fixed all the way on or off depending on the function, so these are being set for you according to what you are doing. </P><Table><TR><TH>State </TH><TH>Feedback (Pedal/NoPedal) </TH><TH>Loop Input </TH><TH>Loop Output </TH></TR><TR><TH>playing </TH><TH>Pedal/Knob </TH><TD>0 </TD><TD>100% </TD></TR><TR><TH>overdubbing </TH><TH>Pedal/Knob </TH><TD>100% </TD><TD>100% </TD></TR><TR><TH>substituting </TH><TD>0 </TD><TD>100% </TD><TD>100% </TD></TR><TR><TH>Recording </TH><TD>NA </TD><TD>100% </TD><TD>0 </TD></TR><TR><TH>multiplying </TH><TD>Pedal/Knob </TD><TD>100% </TD><TD>100% </TD></TR><TR><TH>inserting </TH><TD>0 </TD><TD>100% </TD><TD>0 </TD></TR><TR><TH>replacing </TH><TD>0 </TD><TD>100% </TD><TD>0 </TD></TR><TR><TH>mute </TH><TD>100% </TD><TD>0 </TD><TD>0 </TD></TR></Table><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P><P id="LinkTarget_518">StutterMode (Loop/Delay = Stu) </P><P>StutterMode is just like LoopMode, but Insert works as a &quot;Single Cycle Multiply&quot;. When you have done a multiply and have several Cycles in a loop, pressing Insert will insert repetitions of the next Cycle. As the inserts are made you can overdub a longer phrase over the repetitions of the Cycle, with the results inserted into the loop when you press Insert again. If you press Undo instead, the loop will return to its original form. Using Insert-Undo like this lets you alter the flow of a loop by having one of the Cycles Stutter in a way similar to a skipping CD, and then return to the original. This can make very interesting results when working with very short Cycles, and that is why it is called StutterMode. </P><P>Stutters can be done into a new loop as a copy function. With multiple loops set up in MoreLoops, and SwitchQuantize on, pressing Next-Insert will do the stutter into a new loop. You can overdub on this as it stutters, and keep it with another press of Insert. Pressing Undo sends you back to where you were in the previous loop. Copying a stutter is a good way to preserve the original loop while making stuttered variation out of a fragment from it. </P><P>If you perform a very large number of repetitions of Insert and Undo button-presses to trigger and cancel the SingleCycleMultiply, you may eventually notice bits of the loop being erased by the Undo presses as well. This is a result of the way the Echoplex processes its memory. If you're planning to do heavy Insert + Undo button combinations with SingleCycleMultiply, you should be aware of this, and consider copying your loop via NextLoop before doing intensive stutter work, so you can return to the original loop fully intact if you wish. </P><P>Another trick you can do to avoid the loss of the overdubs is to first fill a bit of memory reserve by letting the loop repeat a few times without AutoUndo. (without the left green AutoUndo dot LED blinking.) You can do this by reducing Feedback a little bit, say to 120 – 125. That is small enough that the fading will not be obvious over a couple of repetitions, but you will force the Echoplex to copy the loop a few times into new memory. Obviously by doing this you lose some of the older stuff in memory, which you will note if you later want to go backwards with Undo. The reasons why this works are very complicated, but suffice to say that you will not find bits of your loop disappearing when doing heavy stuttering effects! </P><P>Also note that Substitute gains more advanced control in StutterMode. If you have a Pedal inserted for Feedback control, the pedal controls the Feedback during normal use and the knob setting is not used. However, during Substitute the knob becomes active for Feedback control. This lets you have two different Feedback settings between normal playing and Substituting. If you do not have a pedal inserted, Substitute operates the way it normally does in LoopMode and has feedback set to 0 while active. See the Substitute section to learn more about this function. </P><Table><TR><TD>State </TD><TD>Feedback (Pedal/NoPedal) </TD><TD>Loop Input </TD><TD>Loop Output </TD></TR><TR><TD>playing </TD><TD>Pedal/Knob </TD><TD>0 </TD><TD>100% </TD></TR><TR><TD>overdubbing </TD><TD>Pedal/Knob </TD><TD>100% </TD><TD>100% </TD></TR><TR><TD>substituting </TD><TD>Knob/0 </TD><TD>100% </TD><TD>100% </TD></TR><TR><TD>recording </TD><TD>NA </TD><TD>100% </TD><TD>0 </TD></TR><TR><TD>multiplying </TD><TD>Pedal/Knob </TD><TD>100% </TD><TD>100% </TD></TR><TR><TD>inserting </TD><TD>Pedal/Knob </TD><TD>100% </TD><TD>100% </TD></TR><TR><TD>replacing </TD><TD>0 </TD><TD>100% </TD><TD>0 </TD></TR><TR><TD>mute </TD><TD>100% </TD><TD>0 </TD><TD>0 </TD></TR></Table><P>DelayMode (Loop/Delay = DEL) </P><P>DelayMode operation is like a traditional delay, and is useful for people familiar with that style of looping. In a traditional delay, the input to the delay line is always open and feedback is always being applied. When a “Hold” button is pressed, the input to the delay is closed, and the feedback is set to 100%. So in DelayMode during normal playing, the Loop Input level is always open and feedback is controlled by the front panel knob. The Overdub button becomes the “hold” button, so when you press it the feedback is set to 100% for infinite repeats and the input is closed so that nothing new is added to the loop. This is different from the LoopMode style, where feedback is always available to control whether overdubbing or not. </P><P>In DelayMode, the foot pedal controls the Loop Input level, which is useful as a way to do volume swells into the delay line. </P><P id="LinkTarget_519">One improvement has been made to DelayMode from LoopIII. The “Hold” function accessed by pressing Overdub also works while Multiplying and while the loop is Muted, which is more consistent. </P><Table><TR><TD>State </TD><TD>Feedback </TD><TD>Loop Input </TD><TD>Loop Output </TD></TR><TR><TD>playing </TD><TD>Knob </TD><TD>Pedal </TD><TD>100% </TD></TR><TR><TD>overdub (hold) </TD><TD>100% </TD><TD>0 </TD><TD>100% </TD></TR><TR><TD>substituting </TD><TD>0 </TD><TD>Pedal </TD><TD>100% </TD></TR><TR><TD>recording </TD><TD>NA </TD><TD>Pedal </TD><TD>0 </TD></TR><TR><TD>multiplying </TD><TD>Knob </TD><TD>Pedal </TD><TD>100% </TD></TR><TR><TD>multiplying(hold) </TD><TD>Knob </TD><TD>0 </TD><TD>100% </TD></TR><TR><TD>inserting </TD><TD>0 </TD><TD>Pedal </TD><TD>0 </TD></TR><TR><TD>replacing </TD><TD>0 </TD><TD>Pedal </TD><TD>0 </TD></TR><TR><TD>mute </TD><TD>100% </TD><TD>Pedal </TD><TD>0 </TD></TR><TR><TD>mute(hold) </TD><TD>100% </TD><TD>0 </TD><TD>0 </TD></TR></Table><P>ExpertMode (Loop/Delay = EXP) </P><P>ExpertMode uses the pedal for Feedback during play and the front panel FeedBack knob for feedback during Overdub, Multiply, and Substitute. This allows you to have different feedback settings between playing and overdubbing. When there is no Pedal connected, the Feedback during play is always max (100%). </P><Table><TR><TH>State </TH><TH>Feedback (Pedal/NoPedal) </TH><TH>Loop Input </TH><TH>Loop Output </TH></TR><TR><TH>playing </TH><TH>Pedal/100% </TH><TD>0 </TD><TD>100% </TD></TR><TR><TH>overdubbing </TH><TH>Knob </TH><TD>100% </TD><TD>100% </TD></TR><TR><TH>substituting </TH><TD>0 </TD><TD>100% </TD><TD>100% </TD></TR><TR><TH>recording </TH><TD>NA </TD><TD>100% </TD><TD>0 </TD></TR><TR><TH>multiplying </TH><TD>Knob/100% </TD><TD>100% </TD><TD>100% </TD></TR><TR><TH>inserting </TH><TD>0 </TD><TD>100% </TD><TD>0 </TD></TR><TR><TH>replacing: </TH><TD>0 </TD><TD>100% </TD><TD>0 </TD></TR><TR><TH>mute </TH><TD>100% </TD><TD>0 </TD><TD>0 </TD></TR><TR><TH>SamplePlay </TH><TD>100% </TD><TD>0 </TD><TD>Pedal </TD></TR></Table><P>InputMode (Loop/Delay = In, Pedal Only) </P><P>InputMode behaves just like LoopMode except that a connected Feedback pedal controls the input volume in the states where the input is open. Feedback is only controlled by the front panel Feedback knob. This InterfaceMode does not exist without a Pedal connected. </P><Table><TR><TD>State </TD><TD>Feedback </TD><TD>Loop Input </TD><TD>Loop Output </TD></TR><TR><TD>playing </TD><TD>Knob </TD><TD>0 </TD><TD>100% </TD></TR><TR><TD>overdubbing </TD><TD>Knob </TD><TD>Pedal </TD><TD>100% </TD></TR><TR><TD>substituting </TD><TD>0 </TD><TD>Pedal </TD><TD>100% </TD></TR><TR><TD>recording </TD><TD>NA </TD><TD>Pedal </TD><TD>0 </TD></TR><TR><TD>multiplying </TD><TD>Knob </TD><TD>Pedal </TD><TD>100% </TD></TR><TR><TD>inserting </TD><TD>0 </TD><TD>Pedal </TD><TD>0 </TD></TR><TR><TD>replacing </TD><TD>0 </TD><TD>Pedal </TD><TD>0 </TD></TR><TR><TD>mute </TD><TD>100% </TD><TD>0 </TD><TD>0 </TD></TR></Table><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P><P id="LinkTarget_520">OutMode (Loop/Delay = Out, Pedal Only) </P><P>OutMode is similar to LoopMode, except the pedal controls the Loop Output level instead of feedback. The feedback is always set from the front panel knob. This InterfaceMode does not exist without a Pedal connected. </P><Table><TR><TD>State </TD><TD>Feedback </TD><TD>Loop Input </TD><TD>Loop Output </TD></TR><TR><TD>playing </TD><TD>Knob </TD><TD>0 </TD><TD>Pedal </TD></TR><TR><TD>overdubbing </TD><TD>Knob </TD><TD>100% </TD><TD>Pedal </TD></TR><TR><TD>substituting </TD><TD>0 </TD><TD>100% </TD><TD>Pedal </TD></TR><TR><TD>recording </TD><TD>NA </TD><TD>100% </TD><TD>0 </TD></TR><TR><TD>multiplying </TD><TD>Knob </TD><TD>100% </TD><TD>Pedal </TD></TR><TR><TD>inserting </TD><TD>0 </TD><TD>100% </TD><TD>0 </TD></TR><TR><TD>replacing </TD><TD>0 </TD><TD>100% </TD><TD>0 </TD></TR><TR><TD>mute </TD><TD>100% </TD><TD>0 </TD><TD>0 </TD></TR></Table><P>ReplaceMode  (Loop/Delay = rPL, Pedal Only) </P><P>In ReplaceMode the pedal controls Loop Output Volume and Feedback simultaneously. The result is similar to LoopMode, except that you hear the reduction for feedback immediately instead of on the next loop pass. This makes it easier to &quot;sculpt&quot; the loop using the feedback control. If you have Overdub on, the pedal serves as a Replace function with smooth level control. So you can add new material and smoothly drop out the loop underneath you as it is overdubbed, allowing for a smooth real-time replace. The disadvantage of ReplaceMode is that if the pedal is in the toe-up position, the loop output is also zero, so it is not possible to create loops with only single repetitions.  It is also less interesting for any loops relying on reduced feedback settings, since the output is affected. This InterfaceMode does not exist without a Pedal connected. </P><Table><TR><TD>State </TD><TD>Feedback </TD><TD>Loop Input </TD><TD>Loop Output </TD></TR><TR><TD>playing </TD><TD>Pedal </TD><TD>0 </TD><TD>Pedal </TD></TR><TR><TD>overdubbing </TD><TD>Pedal </TD><TD>100% </TD><TD>Pedal </TD></TR><TR><TD>substituting </TD><TD>Knob </TD><TD>100% </TD><TD>100% </TD></TR><TR><TD>recording </TD><TD>NA </TD><TD>100% </TD><TD>0 </TD></TR><TR><TD>multiplying </TD><TD>Pedal </TD><TD>100% </TD><TD>Pedal </TD></TR><TR><TD>inserting </TD><TD>0 </TD><TD>100% </TD><TD>0 </TD></TR><TR><TD>replacing </TD><TD>0 </TD><TD>100% </TD><TD>0 </TD></TR><TR><TD>mute </TD><TD>100% </TD><TD>0 </TD><TD>0 </TD></TR></Table><P>FlipMode (Loop/Delay = FLI, Pedal Only) </P><P>FlipMode is an unusual and interesting InterfaceMode, in that the pedal controls both Loop Input and Feedback simultaneously. The interesting thing is that Feedback on the pedal is reversed! When the pedal is all the way in the toe-up position, the Loop Input level is zero and the feedback is at 100%. When the pedal is all the way in the toe-down position, the loop input is at 100%, but the feedback goes to 0. In use this is like a Hold pedal, but with a more fluid action. Or you can think of the pedal as a “soft replace” since operating the pedal lets you smoothly crossfade a replacement section into your loop. </P><P>To get the hang of this InterfaceMode, use loops of about 1 second, keep the pedal in the toe-up position most of the time, and turn the front panel Feedback knob to zero. In Overdub the Feedback is taken from the front panel knob (reversed!), so once you've made an interesting loop by crossfading in Play, you can keep it by going to Overdub. You can then do overdubs onto it using the pedal to control the input volume. By setting the front panel feedback knob you can make 'Overdub' into a simple delay, which can be used as a contrast to the unusual crossfade effect. Multiply allows you to continue to crossfade over repetitions of your loop. Insert is a Single Cycle Multiply (as described under the StutterMode), so you can Overdub onto repeats of the next Cycle in the loop. (Remember you can hit Undo to end the Insert and not keep the stutters in the loop). Mute allows you to build up a crossfaded loop without hearing it and then bring it in at once. To record an ordinary loop in this InterfaceMode, put the pedal in the toe-down position and end Record with Overdub. This InterfaceMode does not exist without a Pedal connected. </P><Table><TR><TD>State </TD><TD>Feedback (reversed) </TD><TD>Loop Input </TD><TD>Loop Output </TD></TR><TR><TD>playing </TD><TD>Pedal </TD><TD>Pedal </TD><TD>100% </TD></TR><TR><TD>overdubbing </TD><TD>Knob </TD><TD>Pedal </TD><TD>100% </TD></TR><TR><TD>substituting </TD><TD>0 </TD><TD>Pedal </TD><TD>100% </TD></TR><TR><TD>recording </TD><TD>NA </TD><TD>Pedal </TD><TD>0 </TD></TR><TR><TD>multiplying </TD><TD>Pedal </TD><TD>Pedal </TD><TD>100% </TD></TR><TR><TD>inserting </TD><TD>Pedal </TD><TD>Pedal </TD><TD>100% </TD></TR><TR><TD>replacing </TD><TD>0 </TD><TD>100% </TD><TD>0 </TD></TR><TR><TD>mute </TD><TD>Pedal </TD><TD>Pedal </TD><TD>0 </TD></TR></Table><P>Using the New InterfaceModes with a Stereo Echoplex Setup </P><P>Many of the new InterfaceModes require a pedal connected to the feedback pedal jack in order to be available at all, and use that pedal as a key part of their functionality. This causes a problem with the traditional Echoplex Stereo setup, where a pedal is only connected in the Master side, and all value changes made with it are sent to the Slave Echoplex by MIDI. With the new InterfaceModes, the slave in such a setup will not have a pedal inserted and it can not be set to the new InterfaceModes. It will only cycle through the first four, while the master cycles through all 8. (This was also true in LoopIII and found to be unsolvable, but we only had OutMode where it happened so it didn’t affect many people.) </P><P>There are a few ways to work around this problem. </P><P>One way is to use a stereo volume pedal for the feedback pedal jack. Connect the two channels of the pedal to the two Echoplexes, and then each will have a pedal inserted with the control coming from the same place. Both can be set to all InterfaceModes, and be controlled appropriately. If you are really picky, you may find that your pedal is not exact between channels, so you may find values are not set exactly the same between the two Echoplexes. Fixing this will either mean finding a pedal that is better matched, or soldering a wire between the two potentiometer wipers inside your pedal to force them to have the same voltage. (This makes the pedal useless as a true stereo volume pedal, so make sure you understand what you are doing before attempting such a modification.) </P><P>A second approach is to use a single mono pedal connected to both units with a Y connector. For this to work, the potentiometer in the pedal must be half the resistance of the pedal requirement for a single Echoplex. This means it will have to be approximately 10Kohms or greater, but you may need to experiment a bit to find a pedal that uses the full range in the best way. For some Echoplex units, values as low as 5Kohm work better. </P><P>A third way which is less useful is to insert a dummy connector into the Feedback Pedal jack of the slave, without connecting it to anything. Then you will be able to at least set the slave to any of the InterfaceModes and use some of their functionality, but on the slave you will not be able to control some parameters that the pedal controls in some of the InterfaceModes. Any Feedback settings controlled by the pedal will be sent by MIDI from the Master, so InterfaceModes that use the pedal for Feedback will work fine. But Input and Output level will not be transmitted, so any InterfaceMode that uses the pedal for those will not work very well this way for Stereo. </P></Sect><Sect><H3>NextOverdub and SimpleCopy </H3><P>Next-Overdub with SwitchQuantize still engages Overdub in the next loop as it did in LoopIII, but if this next loop is empty (reset), it automatically creates a full copy of the previous loop and lets you Overdub as it copies. It does not continue adding multiples as the normal copy function does. This function terminates by itself at the end of the loop. We call this function SimpleCopy. </P></Sect><Sect><H3 id="LinkTarget_522">Double-Click – SmartButton Presses </H3><P>Double-Click Copying </P><P>When you are triggering loops with MIDI and SwitchQuant is on, repeating (double-clicking) the same note in the lame duck period will do a copy into the next loop. This is similar to using Next-Multiply, but is much quicker and simpler to use from a keyboard. </P><P>Double-Click Record </P><P>If the current loop is in reset, and this double-click note is for the current loop, we Record onto it. </P><P>Double-Click Multiply </P><P>If we have a loop playing and we double-click the current loop, we do a Multiply. </P><P>Double-Click StopRecord and StopMultiply </P><P>If Record or Multiply is going and we press the same note again, we end the Record or Multiply and do nothing else. </P><P>Long Press Reset </P><P>If you do a long press on the note for the Loop you are currently in, the loop is reset. This is not the case when SamplerStyle = Att. In that case the currently loop is just retriggered and played as normal for SamplerStyle=Att. </P><P>With this feature you have most functions under control simply by connecting a MIDI keyboard or other MIDI controller programmed with the notes from 84 to 99. </P></Sect><Sect><H3>MIDI pipe </H3><P>All incoming MIDI commands received at the MIDI In port are monitored and selectively sent to the MIDI Out port, depending a bit on the state of the Echoplex. We call this “Piping”. MIDIpipe makes it possible to have multiple Echoplexes chained together and easily switch between using them independently or together as stereo pairs. It also makes it simple to work with multiple devices sharing the same MIDI clock. It is similar to a MIDI merge function, except with Piping the Echoplex is intelligently deciding which things should be piped to the output or not. A Merge function would send everything through, which can cause major problems in some situations. MIDIpipe intelligently prevents such problems. </P><P>MIDIpipe works with very low latency, so you will not notice any significant difference between a command that is piped and one that went direct. </P><P>MIDI Sysex commands are also piped immediately, which is convenient for controlling multiple Echoplexes from a PC using a sysex librarian utility. Unfortunately, while piping Sysex commands the audio is stopped due to the complexity of handling the sysex commands in real time. This is not audible for short commands like changing a single parameter, but you may hear it for long Sysex strings. </P><P>MIDI clock is piped when Sync = In or Off. It is not piped when Sync = Out or OuS, because the Echoplex will also be generating MIDI clock internally. If they both went out you would have double clocks, so MIDIpipe prevents that. </P><P>StartSong, StopSong, and Continue messages are piped in all cases, so an external controller at the beginning of the MIDI chain can send commands to a sequencer that is getting clock from the Echoplex. When the Echoplex is piping Start, Stop, and Continue messages it intelligently checks whether it has already sent the message itself within the last 10ms, and does not pipe if it has. This prevents multiple Echoplexes in parallel from stacking up the StartSong messages when they are all Recording simultaneously. </P><P>Echoplex functions that normally send out a MIDI command do not duplicate the command if it is being piped. For example, if a MIDI command is received for Record, the command is piped to the output and used internally to start the Record function. The Record function does not then send another MIDI command for Record as it normally would, so the commands do not get doubled by piping. </P></Sect><Sect><H3 id="LinkTarget_523">QuantStartPoint </H3><P>When an external clock is present and Sync = In, a long press on StartPoint will reset the internal Loop StartPoint to the Global StartPoint defined by the clock. See the Synchronization section for more details. </P></Sect><Sect><H3>Load and Dump </H3><P>The SampleDump function has new features added that allow it to work with a much wider variety of external devices. See the SampleDump chapter for more information. </P><P>There is a whole new system for Sysex parameter editing, allowing you to save and recall all of the parameters, individual Parameter Presets, or individual parameters in a given preset. This is described in detail in Parameter Editing chapter and in the Sysex chapter. </P></Sect></Sect><Sect><H1 id="LinkTarget_524">Chapter 2: Function Improvements </H1><P>Many existing functions have been enhanced or improved over the way they worked in LoopIII. </P><Sect><H3>Improved Reverse and Undo while Reverse </H3><P>It is now possible to Undo while in Reverse! Undo during Reverse now works normally back to the point where Reverse happened. So any overdubs you do while Reversing can be Undone, which was not possible in LoopIII. However, it is still not possible to Undo past a reverse, since memory really does get used in the other direction and overdubs made prior to reverse get destroyed by ones made after the reverse. </P><P>Since Undo is now available in Reverse, the Reverse indicator is no longer the Undo LED and pressing Undo no longer puts the loop back in Forward. That never made much sense anyway, so now Reverse is indicated by the Insert LED. </P><P>Record-Undo is also possible in Reverse now. So if you start Record by mistake while in reverse, pressing Undo returns you to where you were. In LoopIII that did not work. As a consequence, starting Record does not automatically force you to be Forward anymore, but leaves it in reverse. </P><P>All of this means that Reverse and Forward are really equal now, with the exception that the green Multiple display counts backwards when you are in Reverse. </P></Sect><Sect><H3>Multiply-to-x and Insert-to-x CrossFunction Improvements </H3><P>Rounding for CrossFunctions </P><P>In LoopIII, the Multiply-to-x and Insert-to-x CrossFunctions always created an UnroundedMultiply or UnroundedInsert. In other words, if you had Multiply or Insert going and ended them with a different function, they stopped immediately with the loop length redefined to that point and then went to the new function. Now those actions are rounded, which is more consistent with the typical operation of Multiply and Insert. This means when you end a Multiply or Insert with a different function, they round off to the next Cycle point and then begin that function, similar to if you had ended them with a second press of Multiply or Insert. The Cycles created by Multiply and Insert are not lost as they were before. </P><P>Forcing UnroundedMultiply while Rounding </P><P>UnroundedMultiply can now be executed while rounding. This means that in addition to doing an UnroundedMultiply by pressing Multiply to start and ending with Record, you can press Multiply to start, then Multiply again to finish multiplying and start rounding, and then press Record while it is rounding to force it to stop Unrounded. This is especially interesting when you use alternate functions to end Multiply. Since ending Multiply with an alternate function now does a rounded ending, pressing Record after that forces it to go into that function immediately and end the multiply Unrounded. </P><P>For example, you could press Multiply to multiply your loop out as you add something over it, press Reverse to end the multiply and start it rounding, and then press Record to have it immediately start Reversing with the loop length redefined to that point. </P><P>Or, you could chop out a short reversed snippet of your current longer loop in a new loop. With SwitchQuant on, you press Next-Multiply-Reverse-Record to create a reversed snippet. The Next-Multiply begins a copy of the current loop into the new loop (which is really the same as a multiply into the new loop), The Reverse starts it rounding with the Reverse command armed, and the Record executes it immediately and redefines the new loop at that length. </P><P id="LinkTarget_525">The Hidden UnroundedMultiplyReverse Function </P><P>In LoopIII the limitation with Multiply cross functions that forced us to do them Unrounded resulted in one function that some users liked. If Mutliply was going and overdubs were being made over the top, ending with a single button press of Reverse immediately changed the length of the loop to that point and instantly put the resulting UnroundedMultiply into reverse. This was an interesting use, but after we made the improvements that allowed us to do Multiply cross functions Rounded it was only possible by doing two button presses. (With two button presses, you do it like this: end Multiply with Reverse, then press Record during the Rounding period to set the new loop length and immediately have it in reverse.) </P><P>So for the user who lost this favorite function, we found a way to give it back to him. It is a little bit obscure in operation, so bear with us. Set MoreLoops to some number greater than 1. Set SwitchQuantize on to Confirm. (any quantizing value works, but it is easiest with Confirm.) Record your basic loop in Loop 1. Press NextLoop. You will go into the “Confirming” state, where it waits for another function press before it goes into the next loop. Press Multiply down and hold it down. This will immediately put you into the next loop, copying the audio from the first loop. Overdub as much as you want over multiples of your first loop. When you are ready, release Multiply. The loop in Loop 2 will immediately stop copying, reset the loop length to that point, and go into Reverse! So there is the old UnroundedMultiplyReverse function, now properly called NextUnroundedSUSMultiplyReverse. </P><P>When InsertMode is equal to SUS, this function is disabled in favor of the usual UnroundedMultiply SUS function. </P></Sect><Sect><H3>Undo Improvements </H3><P>Undo can now be executed even when the Undo LED is not green. It will be executed as soon as the Undo LED lights up, so you can easily Undo the maximum possible without struggling to press Undo at the right moment. This is an improvement over LoopIII, where you could have a loop with only a short area containing an overdub that was undoable. The Undo LED turns on and off in such a case to indicate when you are in the Undoable section. In LoopIII you could only tap Undo during that time for it to work. Now you can tap it any time and it will be done for you. </P><P>Undo now checks whether there may be a whole loop length in memory without changes. If there is, Undo acts twice when you press it. This eliminates the frustrating cases where you sometimes pressed Undo and it appeared that nothing had happened. So you had to press Undo twice to get rid of a bit you had just listened to. This makes Undo feel a lot more responsive for some users who had difficulty with it before. </P><P>These improvements for Undo are true for both the Short-Press and Long-Press versions of Undo. </P></Sect><Sect><H3>Exiting from SamplePlay to Play with Undo </H3><P>SamplePlay is when a loop has been triggered like a sampler, where a trigger starts the loop at the beginning and it plays once and goes back to mute. Repeated triggers will retrigger the loop. In LoopIII pressing Undo during a SamplePlay just immediately stopped it and put you into mute. Another button press was required to go back to the normal play state, which was never very convenient. </P><P>In LoopIV this has been improved. Pressing Undo during a SamplePlay now puts you seamlessly back into Play, so your loop keeps going instead of stopping at the end. This is really useful if you are doing a lot of retriggers for stutter effects, and then finally decide to let the loop keep playing. You just have to press Undo and it seamlessly continues! </P></Sect><Sect><H3>Next-to-X CrossFunction Undo Improvement </H3><P>When Undo is pressed while overwriting a loop with Next-Record, Next-Multiply, or Next-Insert, the target loop is now recovered. </P><P>In LoopIII if you did a Next-Multiply to copy loop 1 into loop 2, and then changed your mind and pressed Undo, it correctly returned to loop 1 but left loop 2 in Reset. The previous contents of loop 2 were lost. Now it is correctly preserved. </P></Sect><Sect><H3 id="LinkTarget_526">Simultaneous Overdub </H3><P>Overdub can now can be held on in a sustain fashion with a long press while simultaneously pressing other buttons to execute other functions. This is true whether Overdub is activated from the front panel buttons, from the foot pedal, or with a momentary switch in the Overdub jack. In LoopIII this did not always work. Overdub would sometimes get stuck on when another button was pressed. </P><P>For example, now you can keep Overdub long-pressed and then press Reverse simultaneously to go in and out of Reverse while Overdubbing. </P><P>Simultaneous Overdub is useful when using Overdub as a SUS function. Note this only works with the Overdub button, and no other functions. Also, it does not work to do long-press functions on other buttons while holding Overdub. They will be treated as short-presses. </P></Sect><Sect><H3>8ths/Cycle and Sync Parameter Changes Occur in Rhythm </H3><P>Now when a loop is playing and the 8ths/Cycle or Sync parameters are edited, the change of value is only activated at the first Loop StartPoint after you come out of the Parameter editing state. At that point you jump directly to the new selected value. This means the value change occurs only while back in the playing state, and only at a rhythmically sensible point. This helps eliminate any confusion when working with a synchronized sequencer and makes for much smoother transitions into new time signatures. </P><P>Try changing 8ths/Cycle with sync = Out and a sequencer slaving to the clock. You control the sequencer's tempo in relation to your loop! </P><P>Also, the 8ths/Cycle parameter has new values, allowing you to have up to 256 8th notes in a Cycle. This gives a lot more flexibility for how the Echoplex synchronizes to external devices. </P><P>When editing, the most important values come first to make them easy to select: 8,4,2,6,12,16,32,64,128,256, then it goes on with 1,2,3...96. Note that with the new data wheel feature, the top of the knob range ends at 54 instead of 96. This was done because we found it was easier to set the more typical values when the knob resolution was limited a little bit. To reach the values between 54 and 96 you simply use the front panel button to continue incrementing the number in the usual way. A long-press while editing the Parameter returns you to the initial value of 8. </P></Sect></Sect><Sect><H1 id="LinkTarget_527">Chapter 3: Display </H1><P>The Display has been enhanced in a variety of ways to make operation easier and give more information to the user. </P><Sect><H3>Visual Tempo and Sync Guide </H3><P>It is often difficult in looping to feel the length of a loop before there are any good rhythmic clues recorded into it. This can make it frustrating to overdub new material that is intended to be in rhythm. To aid in this a new visual tempo guide has been added to help the user find the tempo. </P><Table><TR><TH>Timing LED: </TH><TH>blinks with the sub-Cycles (8th notes) defined by Parameter 8ths/Cycle and the global clock. </TH></TR><TR><TH>Keys LED: </TH><TD>blinks at local Cycle StartPoints. </TD></TR><TR><TH>MIDI LED: </TH><TD>blinks with the local Loop StartPoint. (only shown if multiples established) </TD></TR><TR><TH>Multiple Right Dot: </TH><TD>Global MIDI StartPoint (1 of the sequencer). only shown if not aligned. </TD></TR><TR><TH>Multiple Left Dot: </TH><TD>Sync correction happens, as follows: </TD></TR><TR><TH/><TD>bright: </TD><TD>sync came early (jumps back almost the whole loop) this means the external sequencer was a little fast </TD></TR><TR><TH/><TD>faint: </TD><TD>sync came late (jumps a little) this means the external sequencer was a little slow </TD></TR><TR><TH>Loop Green Dot: </TH><TD>AutoUndo executed (loop was not changed that pass.) </TD></TR></Table><P>When Sync = In and an external clock source is present, the Tempo LEDs will initially reflect the StartPoints defined by the external clock. </P><P>If the loop is shifted out of alignment with the external clock, the Tempo LEDs will then reflect our internal loop StartPoints. The Global MIDI StartPoint LED (lower right dot on the Multiple display) will then blink in time with the StartPoints of the external clock. This gives a visual indication of how the loops are aligned. When a ReAlign is done to bring them back together, the Global MIDI StartPoint LED stops blinking. </P><P>The LED for 8th note sub-cycles counts on 8th notes determined by the global clock. The cycle LED, on the other hand, blinks at the local StartPoints. If multiple loops are used and the loops are switched unquantized, it is possible to see these move out of alignment with each other. This can be a little disconcerting, but it can also be helpful as a reference of where the global clock is in relation to your cycle points as you switch loops. </P><P>If the tempo is above 400 BPM, the 8th note sub-cycle LED stops blinking since it becomes useless as a visual indicator at such speeds. This is also the point where MIDI clock is no longer sent for similar reasons. You can still make loops as short as you like. </P><P>The Multiple Left Dot showing the Sync correction can be useful for tuning the tempo on a sequencer to match with an existing loop on the Echoplex. By watching the frequency and intensity of this LED you can quickly speed or slow the tempo of the sequencer to match loop in the Echoplex, at which point the dot disappears. This technique allows you to start a loop without the sequencer, then start the sequencer and tune its tempo to match. </P></Sect><Sect><H3 id="LinkTarget_528">SyncTime </H3><P>After the second Sync pulse is received, or a sync is established by MIDI clock, the resulting Cycle time is displayed on the LoopTime display. This only appears while in Reset. </P></Sect><Sect><H3>Feedback and Continuous Controller Display </H3><P>Changes to FeedBack are displayed briefly on the LoopTime display while they are being changed. The value appears as a red number (0 -127) in place of the loop time. The display shows the change whether it is made by the front panel knob, foot pedal, or through MIDI. MIDI Loop volume control is displayed in the same way. This is very helpful in controlling these values, since it is often difficult to tell exactly what you have set when using a foot pedal. In the case of feedback you don’t know the result until the next repetition of the loop, which can be frustrating if you didn’t really set it where you wanted. The visual display makes this much easier to manage. </P></Sect><Sect><H3>Command Display </H3><P>Several new functions that do not have their own obvious LED indicator are displayed briefly with some letters on the </P><P>red display. These are: rE Reverse Fd Forward H.SP HalfSpeed F.SP FullSpeed LOA Load Preset SAF Save Preset RES Revert Preset to default AL ReAlign St.S QuantMIDIStartSong S.Pt StartPoint sent cS.P QuantStartPoint S.Un Short Undo L.Un Long Undo </P><P>These become especially useful now with the new MIDI commands that can directly access so many functions. </P></Sect><Sect><H3>Memory Size Display </H3><P>The size of the memory is only shown for a short time after startup and after GeneralReset. To see it again, just press Multiply in Reset. </P></Sect></Sect><Sect><H1 id="LinkTarget_529">Chapter 4:  New Parameter Settings </H1><Sect><H3>Loop/Delay Parameter Settings </H3><P>Changes to the Loop/Delay Parameter: </P><P>LoopMode LOP StutterMode Stu DelayMode dEL ExpertMode EXP InputMode In OutMode Out ReplaceMode rPL FlipMode FLI </P><P>See the New Functions Chapter for more details about these. </P></Sect><Sect><H3>Quantize Parameter Settings </H3><P>Two new values are added for Quantize, Loop and 8th. </P><P>Quantize = Loop </P><P>This quantizes a function to the StartPoint of the entire loop, as opposed to quantizing to the next Cycle point if multiply or insert has been used. </P><P>Quantize = 8th </P><P>This quantizes functions to the subdivision of a Cycle, normally determined by the 8th/Cycle (or Beat) parameter and the loop length. The exception is when Sync=In and a MIDI clock is being received. MIDI clock specifically defines 8th notes, so the MIDI clock information is used for Quantizing to 8th notes in this case. If the loop is too short it does not quantize at all. This happens when the tempo is above 400 BPM, and similarly means no MIDIclock is generated and the Timing LED does not flash. See the LoopDividing section in the New Loop Functions chapter for more details. </P><P>Quantize = CYC </P><P>This is the same as what used to be Quantize = On. This is now the setting for quantizing functions to the next Cycle point. </P><P>Quantize = Off </P><P>Same as before, this means there is no quantizing and all functions are activated immediately. </P></Sect><Sect><H3>8ths/Cycle parameter (8ths/Beat on older units) </H3><P>The 8ths/Cycle parameter has new values, allowing you to have up to 256 8th notes in a Cycle. This gives a lot more flexibility for how the Echoplex synchronizes to external devices. </P><P>When editing, the most important values come first to make them easy to select: 8,4,2,6,12,16,32,64,128,256, then it goes on with 1,2,3...96. Note that with the new data wheel feature, the top of the knob range ends at 54 instead of 96. This was done because we found it was easier to set the more typical values when the knob resolution was limited a little bit. To reach the values between 54 and 96 you simply use the front panel button to continue incrementing the number in the usual way. A long-press while editing the Parameter returns you to the initial value of 8. </P><P id="LinkTarget_530">When a loop is playing and 8ths/Cycle is edited, the change of value is only activated at the first Loop Start after you come out of the Parameter editing state. See the Synchronization chapter for more details. </P></Sect><Sect><H3>Sync </H3><P>Changes to the Sync Parameter: </P><Table><TR><TH>Value </TH><TH>Display </TH><TH>Description </TH></TR><TR><TD>Off </TD><TD>Off </TD><TD>no Sync </TD></TR><TR><TD>OutManualStartSong </TD><TD>OuS </TD><TD>sends Clock, but does not send StartSong at Record </TD></TR><TR><TD>SyncOut </TD><TD>Out </TD><TD>sends Clock plus StartSong and StopSong messages </TD></TR><TR><TD>SyncIn </TD><TD>In </TD><TD>receives Sync </TD></TR></Table><P>See the Synchronization chapter for more details. </P></Sect><Sect><H3>RecordMode = Safe </H3><P>This is a new value for RecordMode, and is just like RecordMode = toggle except that after a Record the feedback is always set to 100%. This will be regardless of the feedback knob or pedal position. When the feedback is changed the Echoplex starts to respond as normal. This setting is useful for people who change feedback but then tend to forget to set it back to 100% before recording a new loop. This can be frustrating if you recorded something perfectly and then a little while later realize it is gone because you left the feedback down. RecordMode=Safe is meant to protect you from that. </P><P>The disadvantage is that if you want to start a loop with the feedback down, you can’t do it with Safe. In that case you would probably just continue to use RecordMode = Toggle. </P><P>RecordMode = SAF is disabled during DelayMode. </P></Sect><Sect><H3>InsertMode </H3><P>Changes to the InsertMode parameter: </P><Table><TR><TD>Insert Only </TD><TD>Ins </TD><TD>same as before </TD></TR><TR><TD>Sustain </TD><TD>SUS </TD><TD>new sustain action for Multiply and Insert </TD></TR><TR><TD>Rehearse </TD><TD>rhr </TD><TD>same as before </TD></TR><TR><TD>Replace </TD><TD>rPL </TD><TD>same as before </TD></TR><TR><TD>Substitute </TD><TD>Sub </TD><TD>new function, similar to Replace </TD></TR><TR><TD>Half Speed </TD><TD>h.SP </TD><TD>new function, changes speed of the loop </TD></TR><TR><TD>Reverse </TD><TD>rEV </TD><TD>same as before </TD></TR></Table><P>See the New Functions chapter for more information on the new functions in InsertMode. </P></Sect><Sect><H3>MoreLoops </H3><P>There are 16 loops available now (instead of 9 as in LoopIII). On the Loop display the numbers above 9 are shown with letters, due to the lack of a leading 1. So they go 1, 2, 3…9, A, b, c, d, E, F, G. </P></Sect><Sect><H3 id="LinkTarget_531">LoopTrig </H3><P>The default value for LoopTrig is now 84 to make room for the expanded MIDI commands. </P></Sect><Sect><H3>SwitchQuantize </H3><P>Changes to the SwitchQuantize parameter: </P><Table><TR><TH>Off </TH><TH>off </TH></TR><TR><TD>Confirm </TD><TD>CnF </TD><TD>waits for an additional button press to jump </TD></TR><TR><TD>CycleQuantize </TD><TD>CYC </TD><TD>jumps at the next Cycle end </TD></TR><TR><TD>ConfirmCycle </TD><TD>CCY </TD><TD>New: behaves like Confirm but additionally quantizes to Cycle </TD></TR><TR><TD>LoopQuant </TD><TD>LOP </TD><TD>Jumps at the next loop end </TD></TR><TR><TD>ConfirmLoop </TD><TD>CLP </TD><TD>behaves like Confirm but additionally quantizes to loop end </TD></TR></Table><P>See the New Functions chapter for more details. </P></Sect><Sect><H3>SamplerStyle </H3><P>Changes to the SamplerStyle parameter: </P><P>Run run same as before. Start StA New: Starts the next loop from the beginning. see New Functions chapter for details. Once One New automatic return function, see New Functions chapter for details. Attack Att same as before with MIDI notes. Acts like “run” with NextLoop button. </P><P>See the New Functions chapter for more details. </P></Sect></Sect><Sect><H1 id="LinkTarget_532">Chapter 5: Synchronization </H1><Sect><H3>SyncRecord </H3><P>SyncRecord is a variation of Record that is done when a Sync of any type is being received and Quantize is off. Instead of always quantizing Record when a sync is coming in as was done in LoopIII, we now do a kind of “Multiply over nothing” for the unquantized case. This means SyncRecord starts immediately when you press Record, counts the Cycles on the green display, and rounds at the end to fit the loop time defined by the sync. This gives freedom from quantization, while still allowing tight synchronization to an external clock source. </P><P>During Reset, the Overdub LED turns yellow to indicate that a Sync arrived. When the second Sync point arrives to define the loop length, the display shows the resulting Cycle time. Whenever the Overdub LED is yellow like this, the next Record press will be a SyncRecord. </P><P>With SyncRecord, you only need to have received the first sync event to begin Recording. As you are Recording, the Echoplex will continue watching the sync to determine what the right cycle times are. </P><P>When Quantize is on SyncRecord does give us one improvement. In LoopIII, as a loop was recorded in sync the cycles would not be counted or differentiated. Now the Cycles are tracked and counted properly. This means that if the incoming clock defines a Cycle length of 2 seconds and you let Record continue to 8 seconds, you will see the multiple counter counting from 1 to 4. The Cycle boundaries will be set at 2.0 seconds. In LoopIII it would have just made a big 8 second cycle. This is especially useful now since the Quantize function can quantize to either the Cycle boundaries or the Loop StartPoint. </P></Sect><Sect><H3>Global/Local MIDIclock </H3><P>There is a new Global/Local MIDIclock system that allows the slaved Echoplex to lock up with an external sequencer without drifting, even if the loop start point on the Echoplex is moved by one of the following de-aligning functions: </P><P>-StartPoint </P><P>-Sample triggering </P><P>- Mute-Undo (restart loop) </P><P>-Reverse </P><P>-HalfSpeed </P><P>- Next (Each loop keeps its own local MIDIclock counter) </P><P>-stopping and restarting the sequencer or drum machine </P><P>This lets you shift the loop freely away from the downbeats of an external sequencer for interesting rhythmic effects. All the while, the Echoplex keeps track of the external sequencer’s downbeat and clock as a “Global” clock, and the local Loop’s StartPoint as a “Local” clock. This allows for incredible new capabilities in the Echoplex to shift loops out of alignment from each other without losing sync, and then ReAlign them perfectly with each other again at will! </P><P>After de-aligning the loop, the original alignment of the Loop StartPoint with MIDI beat 1 can be restored with the new ReAlign functions or with reset. ReAlign is available as the Mute-Multiply combination on the front panel, or directly by MIDI. See ReAlign section below for more details. </P><P>All the following functions serve to bring the loop together with the sequencer again, once the loop has been de-aligned by one of the functions above: </P><P>- Reset (start a new loop with the StartPoint at MIDI beat 1) </P><P>-ReAlign (Restart the current loop at the next MIDI beat 1) </P><P>-MuteReAlign (same as ReAlign, but the loop is muted while waiting to ReAlign) </P><P>-QuantStartSong (stop the sequencer and restart it at next Loop StartPoint) </P><P>- MuteQuantMIDIStartSong (same as QuantStartSong but loop is muted while waiting) Each of those functions is available separately from DirectMIDI (in any state, not just Mute.) </P><P>From the front panel the traditional cross function Mute-Multiply offers some of those functions, depending on the Sync parameter and Sync events coming in to the Echoplex. </P></Sect><Sect><H3>ReAlign </H3><P>The new ReAlign Function </P><P>ReAlign allows the loop to be aligned again with an external loop or sequencer that it was in sync with, after it has been brought out of alignment by the use of functions like Reverse, Triggering, HalfSpeed, etc.  This is very useful to allow rhythmic variations by shifting loops to run out of phase with each other, and then perfectly recover to have them back in perfect sync. It is also very helpful when composing with a sequencer, where you frequently need to stop the sequencer and restart it. Being able to restart them in sync becomes necessary. ReAlign works when the Echoplex is the clock master or the clock slave. </P><P>ReAlign makes use of the Global-Local MIDIclock system noted above. The Echoplex uses that to keep track of the “Global StartPoint” defined by an external sync source and our “Local StartPoint” as they are split apart. ReAlign essentially gives you a variety of simple ways to bring them back together again. </P><P>Accessing ReAlign Functions from the Front Panel with Mute-Multiply </P><P>Mute-Multiply is the button combination to do ReAlign from the front panel. When using this combination, the loop is first put into Mute, and then the ReAlign is armed by pressing Multiply.  When the next Global StartPoint comes, the ReAlign is executed. (There are also several new MIDI commands for ReAlign, detailed below.) </P><P>What exactly happens at that point depends on the setting of the Sync parameter and whether or not we have clock. The Display will show what specifically happens, whether it is ReAligning our loop to an external sync, or sending out a StartSong to an external sequencer. A ReAlign of the local loop is displayed as “AL” and sending a StartSong is “St.S.”  The Multiply LED will be red during this waiting time, to indicate the ReAlign is armed. </P><P>If you want to cancel ReAlign after it is armed, another press of Multiply switches it off and we don’t wait for anything anymore. This is helpful if you find yourself stuck there with no sync coming. </P><P>Here are the different cases that can happen with the Mute-Multiply state and various sync conditions: </P><P>Sync=In: </P><Table><TR><TH>Sync Event </TH><TH>Function </TH><TH>Description </TH></TR><TR><TD>BeatSync </TD><TD>TriggerSample </TD><TD>The loop is triggered to play once from the start. Repeated pulses on BeatSync retrigger the loop for stuttering effects. (same as in LoopIII.) </TD></TR><TR><TD>BrotherSync </TD><TD>MuteReAlign / No reaction </TD><TD>The loop is triggered out of Mute to play from the start and continue playing. This ReAligns the loop while BrotherSyncing to other Echoplexes. If a MIDI clock has been received BrotherSync is ignored. </TD></TR><TR><TD>Global MIDI StartPoint </TD><TD>MuteReAlign </TD><TD>If MIDI clock is already being received when Mute-Multiply is pressed, the Echoplex waits for the global MIDI StartPoint and then retriggers the loop out of Mute. </TD></TR><TR><TD>MIDI StartSong </TD><TD>MuteReAlign </TD><TD>If no MIDI clock is present and a MIDI StartSong is received, followed by MIDI clock, the loop triggers immediately from the start and continues playing in sync. </TD></TR><TR><TD>Local StartPoint </TD><TD>N/A </TD><TD>No reaction to Local StartPoint </TD></TR></Table><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P><P>Sync=Out: </P><Table><TR><TH>Sync Event </TH><TH>Function </TH><TH>Description </TH></TR><TR><TD>BeatSync </TD><TD>N/A </TD><TD>No reaction to BeatSync </TD></TR><TR><TD>BrotherSync </TD><TD>MuteReAlign </TD><TD>The loop is triggered out of Mute to play from the start and continue playing. This ReAligns the loop while BrotherSyncing to other Echoplexes. </TD></TR><TR><TD>Global MIDI StartPoint </TD><TD>N/A </TD><TD>MIDI clock input is ignored when Sync=Out </TD></TR><TR><TD>MIDI StartSong </TD><TD>N/A </TD><TD>MIDI StartSong input is ignored when Sync=Out </TD></TR><TR><TD>Local StartPoint </TD><TD>N/A </TD><TD>No reaction to Local StartPoint when Sync=Out </TD></TR></Table><P>Sync=OutManualStartSong (OuS): </P><Table><TR><TH>Sync Event </TH><TH>Function </TH><TH>Description </TH></TR><TR><TD>BeatSync </TD><TD>N/A </TD><TD>No response to BeatSync </TD></TR><TR><TD>BrotherSync </TD><TD>N/A </TD><TD>No response to BrotherSync </TD></TR><TR><TD>Global MIDI StartPoint </TD><TD>N/A </TD><TD>MIDI clock input is ignored when Sync=OuS </TD></TR><TR><TD>MIDI StartSong </TD><TD>N/A </TD><TD>MIDI StartSong input is ignored when Sync=OuS </TD></TR><TR><TD>Local StartPoint </TD><TD>MuteQuantStartSong </TD><TD>A StartSong is sent at the next Loop StartPoint so the sequencer aligns to the Echoplex. The Loop comes out of Mute at the same time so both start together, in sync. </TD></TR></Table><P>Accessing ReAlign Functions with MIDI </P><P>There are several new MIDI commands in support of ReAlign, which give us much more flexibility than we have from just the front panel. With MIDI the ReAlign commands can be accessed at any time with single button press, and don’t necessarily require going into Mute first. (See the MIDI commands section for more info on other new MIDI commands.) </P><P>QuantMIDIStartSong (source# + 40) </P><P>QuantMIDIStartSong waits until the next Loop StartPoint, and then sends a StartSong message out the MIDI port. The Loop continues playing the whole time, and “St.S” is displayed during the waiting period to indicate what is happening. QuantMIDIStartSong is useful when the Echoplex is the clock master and the external sequencer has been stopped. Now the sequencer can be restarted right in time with the loop. QuantMIDIStartSong can be executed at any time, independent of the Sync parameter setting. This allows you to always have a way to send a StartSong message in sync with the loop StartPoint, even if the Echoplex is not the clock master. </P><P>MuteQuantMIDIStartSong (source# + 41) </P><P>When the MuteQuantMIDIStartSong command is received, the Loop is muted instantly and then waits until the next StartPoint. The display will show “St.S.” When it reaches the StartPoint a MIDI StartSong message is sent out the MIDI port to start up the sequencer and the Loop comes out of Mute. This is similarly useful for when the Echoplex is the clock master and we need to restart the sequencer. In this case, both the loop and the sequencer can be muted and brought back on together. MuteQuantMIDIStartSong works the same as the Mute-Multiply combination from the front panel when Sync is set to OuS, but provides a more direct access since it only requires a single command instead of the two button combination. Unlike the front panel function, MuteQuantMIDIStartSong works for any setting of the Sync parameter and can be executed at any time. This allows you to always have a way to send a StartSong message in sync with the loop StartPoint, even if the Echoplex is not the clock master. </P><P>MIDIReAlign ( source# + 38) </P><P>MIDIReAlign executes ReAlign with a single MIDI command. The loop is not muted prior to the ReAlignment. If Sync = In, the display shows “AL” until the Global StartPoint defined by the sequencer’s clock arrives, at which point the loop is retriggered automatically from its StartPoint. When Sync = Out, the loop is retriggered when a BrotherSync is received. </P><P id="LinkTarget_534">MIDIMuteReAlign (source# + 39) </P><P>MIDIMuteReAlign is exactly like using ReAlign from the front panel, except it directly does the function without requiring double button combinations. When the command is received, the loop is muted and “AL” appears on the display. If Sync = In, when the next Global StartPoint arrives the loop is retriggered back in time with the external sequencer. When Sync = OUS, the loop is retriggered when a BrotherSync is received. </P><P>BrotherSync and ReAlign </P><P>As shown in the tables above, ReAlign also works when BrotherSyncing two or more Echoplexes together. When one Echoplex has had it’s StartPoint shifted off from the other, ReAlign can bring them back together. Send a ReAlign command to one of the units and it will wait for a Sync with “AL” on the display. When the BrotherSync pulse comes from the other Echoplex, it will retrigger its loop so they are both back in alignment with each other. BrotherSync is usually done with Sync = Out, so ReAlign to BrotherSync is available there as shown in the table above. </P><P>There can be some confusion when De-Aligning and ReAligning to BrotherSync with more than two Echoplexes. If you have two Echoplexes in BrotherSync and shift one unit’s StartPoint away from the other, you will have them both sending pulses on the BrotherSync line at different times. Those two are able to tell which pulse is theirs and which is from the other unit, so they can stay in sync with each other just fine. They can be ReAligned later at the user’s command. However, if you try to add a third unit to the sync it will see the two different pulses coming and be unable to tell the correct loop StartPoint and loop length. It will not be able to SyncRecord to the others correctly. The best way to deal with this is to have the third unit record a loop in sync before having any of them shift their StartPoints. Then it will be in sync already and not have to worry about joining the sync later. Or ReAlign the other two first before the third unit joins. </P><P>An alternative would be to use the QuantStartPoint command on the unit that has been shifted, so that it will reset its StartPoint to the next BrotherSync coming in from the other Echoplex. Then they will both have their StartPoints in the same spot and be sending BrotherSync pulses at the same time so there will not be any confusion for the third unit. Of course this means ReAlign can no longer be used on the second machine to put it back in the original alignment with the first. </P></Sect><Sect><H3>StopSync </H3><P>If a sync has been received, pressing Overdub in Reset switches off reception of incoming Sync events. This is called StopSync. The Overdub LED turns red to indicate that sync reception is disabled. StopSync is useful if you want to disregard sync for the next Record. </P><P>Another Overdub press in reset or GeneralReset makes the Echoplex receptive to Sync again. This is called ContinueSync. The Overdub LED is turned off until the next sync comes. So after doing a Reset you continue in sync with the incoming clock, but with an Overdub in Reset you can then Record a new Cycle length, unrelated to the external clock. (This is mainly useful for working with other devices that send clock all the time, like Yamaha products.) </P><P>StopSync also disables Tempo, so you can temporarily escape from a Tempo you have defined and then return to it. </P></Sect><Sect><H3>SyncStartPoint </H3><P>Pressing Undo in Reset when Sync = In defines a new Global sync start point just like switching on a MIDI clock or sending a StartSong to the Echoplex does. The Global MIDI clock counter is also restarted at this point. Reset does not do this. </P><P>When it is pressed, we also send out a StartSong message. This allows you to have a clock source upstream of the Echoplex, and be able to stop a downstream device and restart it in alignment with the Echoplex StartPoint. </P><P>If the Echoplex is in a state where we are waiting for a sync, pressing Undo stops it from waiting so recording can be done normally. </P><P>SyncStartPoint is also useful when working with units that send clock all the time. (like Yamaha). </P></Sect><Sect><H3 id="LinkTarget_535">Tempo Select </H3><P>There is a new way to define the tempo of a loop in advance in BPM. This is done by pressing the Undo button in Reset to enter the Tempo Select state and then using the FeedBack knob to set the tempo before a loop is recorded. When this is done a MIDIclock can be sent out and a sequencer or drum machine can be started in tempo. Then a loop can be SyncRecorded to it so that everything matches the preset tempo. </P><P>For more details on the new Tempo Select feature see the description under the New Loop Functions section. </P></Sect><Sect><H3>StartSong, StopSong, and Continue </H3><P>A new value for the Sync parameter allows the user to select how MIDI StartSong and StopSong messages are sent when the Echoplex is the clock master. This choice can be very useful in different circumstances when controlling external sequencers. For example, some sequencers need to have the clock sent in advance to set the tempo, with the StartSong sent later. In other cases you may want to have the StartSong sent immediately with the MIDI clock when the loop is recorded so that a sequencer starts right up with the clock. </P><P>The possible Sync parameter settings are as follows: </P><P>Sync = Out – StartSong and StopSong messages are sent in most instances. MIDI clock is also sent based on the Cycle length of the loop and the setting of the 8th/Cycle parameter. </P><P>Sync = OutManualStartSong (OuS on the display) – MIDI clock is sent, but no StartSong or StopSong messages unless the user specifically commands it. </P><P>Sync = In – MIDI clock, StartSong, and StopSong messages are only received, not sent. They are piped through. </P><P>Sync = Off – MIDI clock, StartSong, and StopSong messages are neither sent or received. They are piped through. </P><P>The exception is for one situation where we send StopSong in both Out and OuS cases: When the clock is stopped at Reset we send a StopSong. This avoids the case of the sequencer or drum machine waking up in the middle of a pattern when the clock happens to get restarted again. </P><P>The following lists all cases where StartSong and StopSong messages are sent, depending on the state of the Sync parameter: </P><P>If Sync = Out </P><P>We send StartSong at: StopRecord (finishing a loop record) Start SyncRecord (in case we come from Tempo Select) SetTempo in Tempo Select UnroundedMultiply UnroundedInsert UnMute (if MuteMode = STA) Mute-Undo trigger (if MuteMode = Cnt) Next (if SamplerStyle = STA) ReAlign MuteReAlign MIDIReAlign MIDIMuteReAlign QuantMIDIStartSong (only at next loop start) MuteQuantMIDIStartSong (only at next loop start) StartPoint MIDI StartPoint Undo Record (only at next loop start) </P><P>We send StopSong at: Reset </P><P id="LinkTarget_536">GeneralReset Start Record Mute (if MuteMode=STA) </P><P>If Sync = OutManualStartSong (OuS) </P><P>We send StartSong at: QuantMIDIStartSong (only at next loop start) MuteQuantMIDIStartSong (only at next loop start) Mute-Mutliply ReAlign </P><P>We send StopSong at: Reset GeneralReset Start Record </P><P>If Sync = IN </P><P>We send StartSong at: Undo in Reset QuantMIDIStartSong (only at next loop start) MuteQuantMIDIStartSong (only at next loop start) </P><P>We send StopSong at: never </P></Sect><Sect><H3>Commanding a StartSong when Sync=In </H3><P>StartSong can be sent in Reset with a press of Undo. This can be useful if you have another source of sync upstream of the Echoplex, but have stopped something downstream from it. Pressing Undo on the Echoplex is a convenient way to send a StartSong message to the downstream device and start it up. This also restarts the internal clock counters used to keep track of the “beat 1” of the external sequencer. So if you get off from the sequencer somehow, or if you want to have a different point in the sequence considered as Beat one, tapping Undo lets you redefine the downbeat. </P></Sect><Sect><H3>QuantMIDIStartSong </H3><P>There is a new MIDI command &quot;Send MIDI StartSong at next loop start&quot;, or simply QuantMIDIStartSong. When this is executed, we send a MIDI StartSong message at the next StartPoint of the loop. The display shows &quot;St.S&quot; momentarily when QuantMIDIStartSong is executed. This command is very useful for restarting a sequencer or drum machine so it is in time with the loop. The function can be executed at any time, independent of the Sync parameter setting. QuantMIDIStartSong allows you to always have a way to send a StartSong message in sync with the loop StartPoint, even if the Echoplex is not the clock master. </P><P>Unfortunately we did not find a reasonable way to do a Quantized StartSong from the front panel without muting first. Therefore QuantMIDIStartSong is only available as a MIDI command. The MIDI location for QuantMIDIStartSong is source# + 40. See the MIDI command section for more information on how to use it. </P></Sect><Sect><H3>MuteQuantMIDIStartSong </H3><P>MuteQuantMIDIStartSong is a variation of QuantMIDIStartSong that first mutes the loop until StartSong is sent. This is useful for having the loop drop out and then everything start up together and in time. MuteQuantMIDIStartSong is also equivalent to using the Mute-Multiply combination from the front panel. The function can be executed at any time, independent of the Sync parameter setting. This allows you to always have a way to send a StartSong message in sync with the loop StartPoint, even if the Echoplex is not the clock master. The MIDI location for MuteQuantMIDIStartSong is source# + 41. See the MIDI command section for more information on how to use it. </P></Sect><Sect><H3 id="LinkTarget_537">SongPositionPointer and ContinueSong </H3><P>SongPositionPointer and ContinueSong messages are received according to the MIDI spec when Sync = In. Since we cannot reproduce the entire sequence of how the loop was built throughout the song, we just put the actual loop in the correct timing with any position of the song, assuming that the loop length and the sequencer timing stayed the same. </P><P>The positioning happens through ReAlign after the sequencer has been continued. After the sequencer has been stopped, put the Echoplex into the ReAlign state. It will wait for a sync event. Press Continue on the sequencer. It will send a SongPositionPointer message to the Echoplex to indicate where in the sequence it is starting from. It will then send a ContinueSong message and begin sending MIDI clocks again. The Echoplex will use the SPP information to determine where the Global MIDI StartPoint is. When the next Global StartPoint occurs, the Echoplex will trigger the loop at the beginning so that it is back in sync with the sequencer. </P></Sect><Sect><H3>QuantStartPoint </H3><P>If Sync=IN and an external clock is present, a long press on StartPoint moves the internal loop StartPoint to the next Global MIDI StartPoint defined by the external clock. (the “Beat 1” of the sequencer). The internal sync counters are realigned to the sequencer’s beat 1. </P><P>The result is the same as if you had built the current loop from the beginning with all operations quantized to the external clock. This is another way to “ReAlign” the loop to MIDI, although you are really redefining the StartPoint according to the external sync instead of retriggering the loop to it. It is especially interesting if you start with a nonrhythmic loop, then bring the drums in later to define the rhythm and sync for further development of the loop. </P><P>QuantStartPoint function is also available as a DirectMIDI command. </P></Sect><Sect><H3>AutoStartPoint </H3><P>The Echoplex maintains sync to an external clock by retriggering the loop at the Global MIDI StartPoint defined by the clock. An old problem is that true sync cannot be maintained when either FeedBack is reduced or Overdub is on, because an early arriving sync would erase the change made in that pass of the loop or cause glitches to record in the loop. We have to “free run” during that time to prevent such problems. There is no fix for this really, as it is a fundamental issue of how sync works in the Echoplex. Once Overdub is turned off and/or FeedBack brought back up, true sync returns. </P><P>We developed a trick for the case where the user reduces FeedBack a lot (a total change of the song for example). He probably does not really care to have his old fading loop stay in sync with the clock anymore, but he will want to stay in sync with whatever new things he overdubs. So when FeedBack is reduced enough and the Echoplex detects that the sync has drifted considerably off, we do an automatic StartPoint function. This sets the internal StartPoint of our loop at the time of the Global MIDI StartPoint defined by the external clock, and that point is then used for sync. Then when you bring FeedBack up again the StartPoint of the Loop and the external sequencer will be very close together and syncing resumes easily. </P></Sect><Sect><H3>8th/Cycle (8th/Beat on older units) </H3><P>The 8th/Cycle parameter has new values, allowing you to have up to 256 8th notes in a Cycle. This gives a lot more flexibility for how the Echoplex synchronizes to external devices. </P><P>When editing , the most important values come first to make them easy to select: 8,4,2,6,12,16,32,64,128,256, then it goes on with 1,2,3...96. Note that with the new data wheel feature, the top of the knob range ends at 54 instead of 96. This was done because we found it was easier to set the more typical values when the knob resolution was limited a little bit. To reach the values between 54 and 96 you simply use the front panel button to continue incrementing the number in the usual way. </P><P id="LinkTarget_538">Another new feature: If a loop is playing, a change of the 8th/Cycle value is only activated at the first Loop End after you come out of the Parameter editing state. At that point you jump directly to the new selected value. This means the value change occurs only while back in the playing state, and only at a rhythmically sensible point. This helps eliminate any confusion when working with a synchronized sequencer and makes for much smoother transitions into new time signatures. </P><P>Try changing 8th/Cycle with sync = out and a sequencer slaving to the clock.  You control the sequencer's tempo in relation to your loop! </P></Sect><Sect><H3>Improved Sync Routings </H3><P>Some improvements have been made in the routing of synchronization signals. </P><P>BeatSync and Sync=IN </P><P>If a BeatSync pulse is received during Reset while Sync=In, MIDIclock is sent out at the corresponding tempo but ignored if received at the MIDI In jack. The purpose of this is to receive a HW sync at the BeatSync of one unit and send the sync on to others as MIDIclock. This worked in LoopIII, but there was the possibility to get the units confused when both MIDI clocks and BeatSync were inputs to the first unit. </P><P>MIDI Clock in and BrotherSync </P><P>If a MIDI clock is received, BrotherSync is ignored </P><P>MIDIclock out and Sync = IN </P><P>MIDIclock is not sent anymore when Sync = In (as was true in LoopIII). This eliminates potential confusions with multiple clocks. </P><P>Clock Piping </P><P>Incoming MIDI clocks are always piped through to the output with a maximum delay of 2ms. This makes it easy to chain together several Echoplexes with the same source clock as sync, while still maintaining other interesting control options between them via MIDI. Clock is only piped when Sync = In or Off. Clock is not piped when Sync = Out or OuS. </P></Sect></Sect><Sect><H1 id="LinkTarget_539">Chapter 6: MIDI Control </H1><Sect><H3>DirectMIDI and VirtualButtons </H3><P>There are two kinds of MIDI commands now, VirtualButtons and DirectMIDI: </P><P>VirtualButtons </P><P>The existing MIDI commands from LoopIII are now called VirtualButtons, because they do exactly what the corresponding front panel button does. You can press the button virtually by MIDI, and do things like long presses and short presses and cross functions. If the ControlSource parameter is set to Notes, then a NoteOn message is the same as pressing the button, and a NoteOff message is the same as releasing the button. If the ControlSource Parameter is set to Continuous Controllers, a controller with a positive value is the same as pressing a button, and a controller message with a value of 0 is the same as releasing the button. This press and release concept is important to remember when programming a MIDI controller. When using VirtualButtons you have to make sure you send both the NoteOn and the NoteOff, so that you both press and release the button! </P><P>The virtual buttons emulate the front panel interface in MIDI. However, there are now more VirtualButtons than front panel buttons because we offer all the InsertMode options simultaneously from MIDI as if they were separate buttons. The MIDIInsertButton is the exception, it still does what is selected in InsertMode for consistency. VirtualButtons allow you to use MIDI to take advantage of the economical design of the front panel interface, which lets you get a lot of functionality out of a few buttons. </P><P>DirectMIDI </P><P>There are a lot of new MIDI commands that are called DirectMIDI. These do new things or reach functions directly that would take several button presses from the front panel. There are some limits to this, in that ReAlign, Half-Speed, and Quantize functions can execute at any time, but the others can only be executed while the loop is playing, overdubbing, or substituting. In many cases DirectMIDI commands only require the NoteOn message, or the single continuous controller message. They do not need the NoteOff. This is not true for the SUS commands. These use the NoteOn message to start their function and the NoteOff message to end it. </P><P>Source# and LoopTrig Parameter Defaults Adjusted </P><P>To create space for the new commands, the default for the LoopTrig Parameter was moved to 84, while the Source# parameter for the commands stays at 36. If the parameters are changed such that the ranges for LoopTriggers and commands overlap, preference is given to the LoopTriggers. So if you lower the LoopTrig parameter, some of the new DirectMIDI commands may become inaccessible. </P><P>Expanded MIDI Commands List </P><P>MIDI buttons </P><Table><TR><TH>Note </TH><TH>source# offset </TH><TH>function </TH><TH>short descriptions (see expanded description below) </TH></TR><TR><TD/><TD/><TD/><TD/></TR><TR><TD>G# </TD><TD>-4 </TD><TD>8thSync out </TD><TD>a short note out at each 8th note (output only) </TD></TR><TR><TD>A </TD><TD>-3 </TD><TD>LoopSync out </TD><TD>a short note out at each Loop StartPoint (output only) </TD></TR><TR><TD>A# </TD><TD>-2 </TD><TD>MIDISync out </TD><TD>a short note out at each Global MIDI StartPoint (output only) </TD></TR><TR><TD>B </TD><TD>-1 </TD><TD>BrotherSync out </TD><TD>a short note out at each Cycle StartPoint (output only) </TD></TR><TR><TD/><TD/><TD/><TD/></TR><TR><TD>C </TD><TD>0 </TD><TD>ParameterButton </TD><TD>Virtually presses the Parameter Button </TD></TR><TR><TD>C# </TD><TD>1 </TD><TD>empty </TD><TD/></TR><TR><TD>D </TD><TD>2 </TD><TD>RecordButton </TD><TD>Virtually presses the Record Button </TD></TR><TR><TD>D# </TD><TD>3 </TD><TD>OverdubButton </TD><TD>Virtually presses the Overdub Button </TD></TR><TR><TD>E </TD><TD>4 </TD><TD>MultiplyButton </TD><TD>Virtually presses the Multiply Button </TD></TR></Table><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P><Table><TR><TD id="LinkTarget_540">F </TD><TD>5 </TD><TD>InsertButton </TD><TD>Virtually presses the Insert Button, depends on InsertMode </TD></TR><TR><TD>F# </TD><TD>6 </TD><TD>MuteButton </TD><TD>Virtually presses the Mute Button </TD></TR><TR><TD>G </TD><TD>7 </TD><TD>UndoButton </TD><TD>Virtually presses the Undo Button </TD></TR><TR><TD>G# </TD><TD>8 </TD><TD>NextButton </TD><TD>Virtually presses the Next Button </TD></TR><TR><TD>A </TD><TD>9 </TD><TD>ReplaceButton </TD><TD>Virtually presses the “Replace Button” </TD></TR><TR><TD>A# </TD><TD>10 </TD><TD>SubstituteButton </TD><TD>Virtually presses the “Substitute Button” </TD></TR><TR><TD>B </TD><TD>11 </TD><TD>InsertOnlyButton </TD><TD>Virtually presses the Insert Button, regardless of InsertMode </TD></TR><TR><TD>C </TD><TD>12 </TD><TD>SpeedButton </TD><TD>Virtually presses the “HalfSpeed Button” </TD></TR><TR><TD>C# </TD><TD>13 </TD><TD>ReverseButton </TD><TD>Virtually presses the “Reverse Button” </TD></TR></Table><P>New DirectMIDI commands </P><Table><TR><TH>Note </TH><TH>source# offset </TH><TH>function </TH><TH>short descriptions (see expanded description below) </TH></TR><TR><TD>D </TD><TD>14 </TD><TD>SUSRecord </TD><TD>Sustain Action Record </TD></TR><TR><TD>D# </TD><TD>15 </TD><TD>SUSOverdub </TD><TD>Sustain Action Overdub </TD></TR><TR><TD>E </TD><TD>16 </TD><TD>SUSRoundMultiply </TD><TD>Sustain Action Rounded Multiply </TD></TR><TR><TD>F </TD><TD>17 </TD><TD>SUSRoundedInsert </TD><TD>Sustain Action Rounded Insert </TD></TR><TR><TD>F# </TD><TD>18 </TD><TD>SUSMute </TD><TD>Sustain Action Mute </TD></TR><TR><TD>G </TD><TD>19 </TD><TD>ShortUndo </TD><TD>Immediately execute the ShortUndo function (Undo to end) </TD></TR><TR><TD>G# </TD><TD>20 </TD><TD>SUSNextLoop </TD><TD>Sustain Action NextLoop (NoteOn = Next, NoteOff = Previous) </TD></TR><TR><TD>A </TD><TD>21 </TD><TD>SUSReplace </TD><TD>Sustain Action Replace </TD></TR><TR><TD>A# </TD><TD>22 </TD><TD>SUSSubstitute </TD><TD>Sustain Action Substitute </TD></TR><TR><TD>B </TD><TD>23 </TD><TD>SUSToggleReverse </TD><TD>Sustain Action Reverse </TD></TR><TR><TD>C </TD><TD>24 </TD><TD>SUSToggleSpeed </TD><TD>Sustain Action HalfSpeed </TD></TR><TR><TD>C# </TD><TD>25 </TD><TD>Reset </TD><TD>Immediately reset current loop </TD></TR><TR><TD>D </TD><TD>26 </TD><TD>GeneralReset </TD><TD>Immediately reset all loops </TD></TR><TR><TD>D# </TD><TD>27 </TD><TD>Exit Parameters </TD><TD>Exit Parameter editing and return to Play state </TD></TR><TR><TD>E </TD><TD>28 </TD><TD>SUSUnroundedMultiply </TD><TD>Sustain Action Unrounded Multiply </TD></TR><TR><TD>F </TD><TD>29 </TD><TD>SUSUnroundedInsert </TD><TD>Sustain Action Unrounded Insert </TD></TR><TR><TD>F# </TD><TD>30 </TD><TD>SUSMute-Retrigger </TD><TD>Sustain Action Mute-Retrigger (NoteOn = Mute, NoteOff=Retrig.) </TD></TR><TR><TD>G </TD><TD>31 </TD><TD>LongUndo </TD><TD>Immediately execute the LongUndo function </TD></TR><TR><TD>G# </TD><TD>32 </TD><TD>Forward </TD><TD>Go into Forward </TD></TR><TR><TD>A </TD><TD>33 </TD><TD>Reverse </TD><TD>Go into Reverse </TD></TR><TR><TD>A# </TD><TD>34 </TD><TD>FullSpeed </TD><TD>Go into FullSpeed </TD></TR><TR><TD>B </TD><TD>35 </TD><TD>HalfSpeed </TD><TD>Go into HalfSpeed </TD></TR><TR><TD>C </TD><TD>36 </TD><TD>PlaySample </TD><TD>Immediately restart the loop and play once </TD></TR><TR><TD>C# </TD><TD>37 </TD><TD>ReTrigger </TD><TD>Immediately restart the loop and play forever </TD></TR><TR><TD>D </TD><TD>38 </TD><TD>ReAlign </TD><TD>Restart the loop at next Global MIDI StartPoint </TD></TR><TR><TD>D# </TD><TD>39 </TD><TD>MuteReAlign </TD><TD>Immediately Mute and restart the loop at next Global MIDI StartPoint </TD></TR><TR><TD>E </TD><TD>40 </TD><TD>QuantMIDIStartSong </TD><TD>Wait to next Local Loop StartPoint and then send a StartSong </TD></TR><TR><TD>F </TD><TD>41 </TD><TD>MuteQuantMIDIStartSong </TD><TD>Immediately Mute, then wait to next StartPoint and send StartSong </TD></TR><TR><TD>F# </TD><TD>42 </TD><TD>StartPoint </TD><TD>Set the StartPoint to the current spot in the loop </TD></TR><TR><TD>G </TD><TD>43 </TD><TD>QuantStartPoint </TD><TD>Wait to next Global MIDI StartPoint and then set the local StartPoint there </TD></TR><TR><TD>G# </TD><TD>44 </TD><TD>BeatTriggerSample </TD><TD>Mute and wait for BeatSync, then trigger loop to play once. Repeated BeatSyncs retrigger the loop. </TD></TR><TR><TD>A </TD><TD>45 </TD><TD>MIDIBeatSync </TD><TD>Virtually send a BeatSync pulse by MIDI </TD></TR></Table></Sect><Sect><H3>SUS MIDI Commands </H3><P>The concept of Sustain action, or “SUS” commands is greatly expanded through DirectMIDI. Every function has a SUS version separately available through MIDI, allowing them to be accessed at any time through a MIDI controller using NoteOn and NoteOff messages. The NoteOn starts the function and the NoteOff ends it. This opens up a whole new range of expressive possibilities with the Echoplex that were never available before! The SUS commands can also be controlled with Continuous Controller messages, where a positive value turns the function on, and a 0 value turns it off. The SUS MIDI commands are detailed in the table above. </P></Sect><Sect><H3>SUSNextLoop </H3><P>SUSNextLoop is an interesting special case of the SUS MIDI commands. With SUSNextLoop, pressing it puts you into the Next Loop and releasing it returns you to the previous loop. In other words, NoteOn puts you into the NextLoop and the NoteOff brings you back. This allows you to bounce in and out of an alternate loop from you main loop. Combining SUSNextLoop with functions like AutoRecord and LoopCopy can give many interesting possibilities for creating alternate loops to bounce in and out of. </P></Sect><Sect><H3>PreviousLoop </H3><P>An interesting feature that falls out of the SUSNextLoop function is a PreviousLoop function. The NoteOff command for SUSNextLoop sends you back one loop. If you only use the NoteOff command for SUSNextLoop, it only sends you backwards through the loops, and becomes the PreviousLoop command! If you set one button on a MIDI controller to only send the NoteOn for SUSNextLoop, and another button to only send the NoteOff for SUSNextLoop, you have a convenient way to go forward and backwards through your loops. </P></Sect><Sect><H3>MIDI pipe </H3><P>All incoming MIDI commands received at the MIDI In port are monitored and selectively sent to the MIDI Out port, depending a bit on the state of the Echoplex. We call this “Piping”.  MIDIpipe makes it possible to have multiple Echoplexes chained together and easily switch between using them independently or together as stereo pairs. It also makes it simple to work with multiple devices sharing the same MIDI clock. It is similar to a MIDI merge function, except with Piping the Echoplex is intelligently deciding which things should be piped to the output or not. A Merge function would send everything through, which can cause major problems in some situations. MIDIpipe intelligently prevents such problems. </P><P>MIDIpipe works with very low latency, so you will not notice any significant difference between a command that is piped and one that went direct. </P><P>MIDI Sysex commands are also piped immediately, which is convenient for controlling multiple Echoplexes from a PC using a sysex librarian utility. Unfortunately, while piping Sysex commands the audio is stopped due to the complexity of handling the sysex commands in real time. This is not audible for short commands like changing a single parameter, but you may hear it for long Sysex strings. </P><P>MIDI clock is piped when Sync = In or Off. It is not piped when Sync = Out or OuS, because the Echoplex will also be generating MIDI clock internally. If they both went out you would have double clocks, so MIDIpipe prevents that. </P><P>StartSong, StopSong, and Continue messages are piped in all cases, so an external controller at the beginning of the MIDI chain can send commands to a sequencer that is getting clock from the Echoplex. When the Echoplex is piping Start, Stop, and Continue messages it intelligently checks whether it has already sent the message itself within the last 10ms, and does not pipe if it has. This prevents multiple Echoplexes in parallel from stacking up the StartSong messages when they are all Recording simultaneously. </P><P>Echoplex functions that normally send out a MIDI command do not duplicate the command if it is being piped. For example, if a MIDI command is received for Record, the command is piped to the output and used internally to start the Record function. The Record function does not then send another MIDI command for Record as it normally would, so the commands do not get doubled by piping. </P></Sect><Sect><H3 id="LinkTarget_542">MIDI Data Wheel </H3><P>The Feedback knob value is transmitted by the MIDI continuous controller DataWheel (Continuous Controller #6) when in Parameters and Tempo Select. Likewise, the Echoplex receives the DataWheel control for changing the parameter values from MIDI. </P></Sect><Sect><H3>Sysex </H3><P>All parameters can be edited by Sysex. This is a useful way to backup your settings and presets, send song parameters from a sequencer, or control single parameters from a capable MIDI controller. Since the sound is interrupted during this edit, you may hear a pause for a longer sequence of Sysex commands. For a single parameter change the dropout is not audible. All Sysex information is piped so you can set two Echoplexes to different Device IDs and set them up separately, even with MIDI connected simply from MID-In to MIDI-out. See the Sysex section for more details. </P></Sect><Sect><H3>MIDI Sync Indicators </H3><P>MIDI notes are transmitted out at various synchronization points related to the current loop. These are shown at the top of the MIDI command table above. MIDI notes are sent to indicate each Loop StartPoint, Global MIDI StartPoint, Cycle point, and 8th note. The Global MIDI StartPoint note is only sent if it is different from the Local StartPoint. The 8th note is sent at points determined by the 8th/Cycle parameter and the loop length. </P><P>The purpose of these notes is to provide a convenient marker point when recording the Echoplex output into an audio sequencing or hard disk recording program. If you also record the midi output you can easily see the StartPoints, Cycle points, and 8th notes of your loops in the track windows. </P><P>Another use of these notes is a metronome. You can use them to trigger sounds on a synthesizer or sampler to serve as an audible tempo indicator for your loops. </P></Sect></Sect><Sect><H1 id="LinkTarget_543">Chapter 7: Parameter Presets and Editing </H1><Sect><H3>Presets </H3><P>Parameter settings can now be stored and recalled as Presets. There are 15 memory spaces to save sets of all local parameters and Tempo. So for example, if you like to switch Quantize on and off quickly, you could switch it on through the parameter matrix, then save to Preset 1, then switch it off and save to Preset 2. Then keep calling those two Presets with a MIDI Program Change from a MIDI controller while playing. Much easier than editing from the front panel every time! </P><P>Selecting Presets </P><P>The 15 Presets can be chosen by one of the following methods: </P><L><LI><Lbl>• </Lbl><LBody>From within the Preset Editor, accessed with the Reserved parameter </LBody></LI><LI><Lbl>• </Lbl><LBody>with the Mute and Insert buttons while in Reset </LBody></LI><LI><Lbl>• </Lbl><LBody>with MIDI Program Change commands at any time. </LBody></LI><LI><Lbl>• </Lbl><LBody>Sysex </LBody></LI></L><P>When InsertMode=HalfSpeed, that takes precedence over the Preset control on the Insert button. So only the Mute button is available for changing presets in that case. </P><P>Parameters saved in Presets </P><L><LI><Lbl>• </Lbl><LBody>Loop/Delay </LBody></LI><LI><Lbl>• </Lbl><LBody>Quantize • 8ths/Cycle </LBody></LI><LI><Lbl>• </Lbl><LBody>Sync </LBody></LI><LI><Lbl>• </Lbl><LBody>Threshold </LBody></LI><LI><Lbl>• </Lbl><LBody>RecordMode </LBody></LI><LI><Lbl>• </Lbl><LBody>OverdubMode </LBody></LI><LI><Lbl>• </Lbl><LBody>RoundMode </LBody></LI><LI><Lbl>• </Lbl><LBody>InsertMode </LBody></LI><LI><Lbl>• </Lbl><LBody>MuteMode </LBody></LI><LI><Lbl>• </Lbl><LBody>MoreLoops </LBody></LI><LI><Lbl>• </Lbl><LBody>AutoRecord </LBody></LI><LI><Lbl>• </Lbl><LBody>LoopCopy </LBody></LI><LI><Lbl>• </Lbl><LBody>SwitchQuant </LBody></LI><LI><Lbl>• </Lbl><LBody>Velocity </LBody></LI><LI><Lbl>• </Lbl><LBody>SamplerStyle </LBody></LI><LI><Lbl>• </Lbl><LBody>Tempo </LBody></LI></L><P>Global Parameters not Changed by Presets </P><P>The MIDI parameters are set globally and independent of the Presets. So the following are Global: </P><L><LI><Lbl>• </Lbl><LBody>MIDI Channel </LBody></LI><LI><Lbl>• </Lbl><LBody>ControlSource </LBody></LI><LI><Lbl>• </Lbl><LBody>Source# </LBody></LI><LI><Lbl>• </Lbl><LBody>VolumeCont </LBody></LI><LI><Lbl>• </Lbl><LBody>FeedBkCont </LBody></LI><LI><Lbl>• </Lbl><LBody>LoopTrig </LBody></LI><LI><Lbl>• </Lbl><LBody>Device ID for Sysex and SampleDump </LBody></LI><LI><Lbl>• </Lbl><LBody>Last Preset </LBody></LI></L><P>MoreLoops is a special case </P><P>Normally, when the MoreLoops parameter is changed a General Reset is done automatically. This is necessary because the memory must be reorganized to support the new number of loops, but it unfortunately means current loops are lost. When you change MoreLoops from the front panel we assume you are doing it consciously and are aware that any loops you have going will get reset. However, we found it was very easy to change to a preset while you are playing without realizing that it had a different number of loops stored, and consequently destroy something you are playing. </P><P>We developed a simple system to protect against this situation. Whenever you change presets while in a loop with something recorded, any change in the MoreLoops parameter due to the Preset change is ignored. So your loops are not destroyed by the Preset change. If you are in a reset loop when you make the Preset change, we go ahead and implement the MoreLoops change as well and do the GeneralReset. If you changed the preset while playing and you really did want the MoreLoops to change and have everything reset, you will need to reset the current loop and then reload that preset. </P><P>Understanding the Playing State “Preset” </P><P>Preset 0 is the preset used and edited while playing. These are the Parameters active while you use the Echoplex. When one of the fifteen presets is loaded for use, what really happens is the values in that saved preset are copied into Preset 0 to be used while playing. When you save a preset using the preset editor, what really happens is the values in the Preset 0 playing state are copied into the preset you are saving to. </P><P>If you make a change in a parameter value while you are playing, it is only changed in Preset 0, and the Preset you loaded is not affected. This is really helpful because it means you can freely reach over and change something as you play, without affecting any Presets. When you decide you like a setup, you can then go into the Preset Editor and save it. Or you can load up another preset you have saved to get back to a known state. Changes made in Preset 0 are preserved when the power is turned off. </P><P>Preset 0 is really the same as the way Parameters worked in LoopIII. So if you do not use Presets at all, everything will be the same as it was before in LoopIII when you make Parameter changes. As you change Parameters, you will actually be editing the Preset 0 location, but you won’t even realize it. </P><P>We call the playing state “Preset 0” now because that is the actual location in memory where it lives. This will matter to you if you use Sysex or a preset librarian program to edit the parameter values saved in your presets. If you want to edit the active playing state parameters with Sysex, you simply edit the Preset 0 location. See the Sysex chapter for more information on Sysex control. </P><P>Selecting Presets from the Front Panel </P><P>In Reset, the Mute and Insert buttons can be used to select and load Presets 1 -15. Mute scrolls up and Insert scrolls down. The preset number is displayed on the LoopTime display as it is selected. Once you stop on one for longer than 400ms it will be loaded. The display briefly shows “LOA” when the preset loads. The Mute and Insert LEDs will be Orange to indicate they are available for preset selection. </P><P>There are two important things to note about the front panel preset selection feature. For one, if InsertMode = Half Speed you do not have the Insert button available to scroll down through the Presets. This is because we want to be able to start loops in half speed, so the Insert button is dedicated to selecting half speed while in reset. You will be able to tell this is the case because the Insert LED will be green or red (full speed and half speed, respectively). It is Orange if it is available for changing presets. You will also be able to tell if you press Insert anyway, because the display will show H.SP or F.SP instead of the preset number. </P><P>The second important thing to note is the front panel Preset selection is not available at all until you have saved your first preset! This was done to make the new user interface friendlier to new users. We didn’t want somebody to accidentally press the button, select a preset, and lose any other parameter changes they had made before they understood how the preset feature worked. So until they’ve read this section and learned how the presets work, we save them from that mistake. In any case, there is no point in loading presets if you haven’t saved any, so we don’t clutter the interface with it. </P><P id="LinkTarget_544">Selecting Presets with MIDI Program Change </P><P>Selecting presets with MIDI is very straight forward. MIDI program change messages 1 – 15 select presets 1 – 15. Remember, MoreLoops value changes are not made unless we are already in Reset. </P><P>If you have edited parameters on the fly and want to return to what you had, MIDI program change 16 reloads the original saved preset. </P></Sect><Sect><H3>Preset Editor </H3><P>Accessing the Preset Editor </P><P>The Preset Editor is accessed by the “Reserved” parameter. This is in the “Switches” (or “Keys”) row, under the NextLoop Button. When you press it you are in the Editor for the Presets. There, all the other buttons get a new </P><Table><TR><TH>function. </TH></TR><TR><TH>Preset Editor Commands </TH></TR><TR><TH>Mute </TH><TD>counts up Preset# </TD></TR><TR><TH>Insert </TH><TD>counts down Preset# </TD></TR><TR><TH>Multiply </TH><TD>Sets selected Preset and Preset 0 to factory default </TD></TR><TR><TH>Overdub </TH><TD>long press saves the playing state settings (Preset 0) to the preset displayed </TD></TR><TR><TH>Record </TH><TD>loads the preset displayed to the playing state setting (preset 0) for use. </TD></TR></Table><P>Preset Editor Display </P><P>The Display shows the Preset number as “Pr  #”. No dot after “Pr” indicates that this Preset is the last one that has been loaded into the Playing state Preset 0. If there is a dot after “Pr”, it is not the one loaded. When the display shows “PrE” it means that the Preset 0 parameter settings have been modified since the preset was loaded to them. With the display indicators it should be easy to tell in the editor which preset you are currently using, and if there are new changes made that you may want to save. </P><P>Time Required for Saving Presets </P><P>Please note that the saving of a Preset to the non-volatile memory in the Echoplex takes about 400ms. if the unit is power cycled before that, it may come back on with different parameter values than expected. Make certain you wait a second after saving for the Parameters to be fully saved before turning off the power. </P></Sect><Sect><H3>Sysex Dump/Load </H3><P>Parameter sets can be dumped and loaded from an external MIDI device for backups or librarian functions. See the Sysex section for more details. </P></Sect><Sect><H3>Sysex Individual Parameter Editing </H3><P>All parameters can be individually edited by Sysex. Sysex editing is useful for backing up your settings and presets, sending song parameters from a sequencer, or controlling single parameters from a capable MIDI controller. Since the sound is interrupted during this edit, you may hear a pause for a longer sequence of Sysex commands. For a single parameter change the dropout is not audible. All Sysex information is piped so you can set two Echoplexes to different Device ID’s and set them up separately, even with a simple MIDI-In to MIDI-Out connection. Make certain you have set the Echoplex device ID to something. If the Device ID is left at 0, sysex will not be received. See the Sysex section for more details. </P></Sect><Sect><H3>DataWheel </H3><P>The parameters that have many values can be selected with the FeedBack knob on the front panel while that parameter is being viewed. The FeedBack knob becomes the DataWheel. Select the parameter as usual and then turn the Feedback knob to edit the value instead of pushing the button repeatedly. Parameters with less than 127 values have them spread over the range of the knob. Note this only works from the actual knob on the front panel. A pedal connected to the feedback pedal jack does not have this function. </P><P>DataWheel works with: • 8th/Cycle </P><L><LI><Lbl>• </Lbl><LBody>MIDI channel </LBody></LI><LI><Lbl>• </Lbl><LBody>Source # </LBody></LI><LI><Lbl>• </Lbl><LBody>LoopTrig # </LBody></LI><LI><Lbl>• </Lbl><LBody>VolumeCont </LBody></LI><LI><Lbl>• </Lbl><LBody>FeedBkCont </LBody></LI><LI><Lbl>• </Lbl><LBody>MoreLoops </LBody></LI></L><P>Since the DataWheel is the Feedback knob in the playing state, the Echoplex makes some effort to avoid conflicts between feedback settings and DataWheel settings. The value for feedback is stored and maintained when you enter parameters. Using the feedback knob as the DataWheel for editing a Parameter value does not change the actual feedback setting. When you leave Parameters, feedback is still set the same as you left it. However, you should still be careful because the knob will now be in a different position. The next time you change the feedback with the knob the value will jump to the knob position. Usually it is best to remember setting it back where you want before returning to play mode. The Echoplex helps you with this if you forget, by providing a short time gap after you start moving the knob before the knob is read. So if you turn the knob quickly you can return to the value you want without getting a strange feedback setting. </P></Sect><Sect><H3>DataWheel Continuous Controller </H3><P>The Feedback knob value is transmitted by the MIDI continuous controller DataWheel (Continuous Controller #6) when in Parameters. Likewise, the Echoplex receives the DataWheel control for changing the parameter values from MIDI. </P></Sect></Sect><Sect><H1 id="LinkTarget_546">Chapter 8: Sample Dump </H1><Sect><H1>Introduction </H1><P>The Echoplex uses MIDI sample dump to transfer the loop you recorded to another Echoplex, sampler, or even your computer. MIDI Sample Dump is an extension of the MIDI standard which has been used by many samplers in the past 20 years. It uses Sysex to transmit the audio data. Unfortunately, not all samplers implement sample dump exactly the same way. To give you the possibility of transferring samples between a wide range of samplers we have provided new ways of changing parameters of the MIDI sample dump in the Echoplex. </P><P>The following chapters give a short introduction into some details of the MIDI sample dump that may help you. </P><Sect><H3>General Sample Dump </H3><P>Connections </P><P>The minimal MIDI patch is to connect the MIDI-Out of the sending unit to the MIDI-In of the receiving unit. </P><Figure><ImageData src="images/LoopIVGuide_img_1.jpg"/></Figure><P>MIDI-In MIDI-Out MIDI-In MIDI-Out </P><Sect><H5>Unit A (sender) Unit B (receiver) </H5><P>MIDI Dump: open loop connection </P><P>Unit A sends a header first, containing general information about the sample to be sent. Then it divides the sound data into packets and sends one packet at a time. </P></Sect><Sect><H5>Unit A (sender) Unit B (receiver) </H5><P>Dump Header </P><P>Data #1 </P><P>Data #2 </P><P>... </P><P>Data #8265 </P><Figure><ImageData src="images/LoopIVGuide_img_2.jpg"/></Figure><P>MIDI dump: transfer with open loop connection </P><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P><P>If you have two MIDI cables you should connect the two units in both directions. </P><Figure><ImageData src="images/LoopIVGuide_img_3.jpg"/></Figure><P>MIDI-In MIDI-Out MIDI-In MIDI-Out </P><Sect><H5>Unit A (sender) Unit B (receiver) </H5><P>MIDI dump: closed loop connection This allows unit B to acknowledge each package as it arrives. This is faster and safer than the open loop method. </P></Sect></Sect><Sect><H5>Unit A (sender) Unit B (receiver) </H5><P>Dump Header </P><P><Figure><ImageData src="images/LoopIVGuide_img_4.jpg"/></Figure>ACK </P><P>Data #1 </P><P>ACK </P><P>Data #2 </P><P>ACK </P><P>... </P><P>... </P><P>Data #8265 </P><P>ACK </P><P>MIDI Dump: transfer with closed loop This gives the receiving unit B an opportunity to check each incoming packet and ask for a retransmit if necessary. </P></Sect><Sect><H5>Unit A (sender) Unit B (receiver) </H5><P>Dump Header </P><P><Figure><ImageData src="images/LoopIVGuide_img_5.jpg"/></Figure>ACK </P><P>Data #1 </P><P>ACK </P><P>Data #2 </P><P>NAK ! </P><P>Data #2 </P><P>ACK </P><P>... </P><P>... </P><P>Data #8265 </P><P>ACK </P><P>MIDI Dump: closed loop allows packet checking </P><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P><P>Dump Header </P><P>ACK </P><P>Who starts sending? </P><P>The previous section showed the case where the sample dump was initiated from the sending unit A. This is not always possible or easy. Some samplers don’t even have a sample dump button or menu command. They completely rely on the other unit to initiate the transfer. This means the receiving unit has to send a sample dump request first. The sending unit then reacts by sending the desired dump. </P><Sect><H5>Unit A (sender) Unit B (receiver) </H5><Figure><ImageData src="images/LoopIVGuide_img_6.jpg"/></Figure><P>Request </P><Figure><ImageData src="images/LoopIVGuide_img_7.jpg"/>ACK ACK Data #1 Data #2 </Figure><Table><TR><TD>... </TD><TD/></TR><TR><TD/><TD>... </TD></TR><TR><TD>Data #8265 </TD><TD><Figure><ImageData src="images/LoopIVGuide_img_8.jpg"/></Figure></TD></TR><TR><TD><Figure><ImageData src="images/LoopIVGuide_img_9.jpg"/></Figure></TD><TD>ACK </TD></TR></Table><P>MIDI Dump: request initiates dump </P><P>Of course, this works only with a closed loop connection. </P><P>Sample Number </P><P>The Sample Dump header and request contain several pieces of information about the sample. The most important one for the user is the sample number. </P><P>A sampler can store many samples. These samples are usually indexed. In a MIDI sample dump the sender tells the receiving unit what sample number it is sending. Correspondingly the receiving unit can request a specific sample number. The sample number can range from 0 to 16383. Usually not all numbers are accessible to the user. </P><P>Unfortunately some samplers start numbering the samples with 0 and others with 1, while still others show you a 1 but actually send them as sample number 0! You have to find out what numbering system your sampler uses. If you can’t find it in your manual you have to try it out. Send a sample as #10 and see whether it arrives as #9, #10 or #11. </P><P>See below for information on how sample numbers are used in the Echoplex. </P><P>Device ID </P><P>The device ID of Sysex messages (sample dumps are Sysex messages) are used to make sure that the message is received only by the device that you wanted to send it to. </P><P>Two units have to have the same ID in order to talk with each other. </P><P>The name “Device ID” is somewhat misleading. “Sysex channel” would be more appropriate. Think of it as the equivalent of the MIDI channel. But be careful, MIDI channel and Device ID don’t have to be the same value! </P><P>It is possible to have the MIDI notes go through channel 1 to one unit and the MIDI sysex through device ID 114 to another unit. </P><P>Device IDs can be in the range from 0 to 127. </P><P>A device ID of 127 has a special meaning.  If you set the receiving unit to 127, all device IDs are accepted. If you set the sending unit to 127, all receiving units should therefore accept your SYSEX data. This is called broadcasting. See below for information on how device IDs are used in the Echoplex. </P><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P></Sect></Sect></Sect><Sect><H3 id="LinkTarget_547">Echoplex Sample Dump </H3><P>Connections </P><P>The Echoplex allows you to transfer the sound data through open loop connections (one cable) and closed loop connections (two cables). If you have a choice always use closed loops. The transmission will be approximately twice as fast. </P><P>Who starts sending? </P><P>The Echoplex can either initiate a sample dump itself (with the Dump button in parameter mode P3) or respond to a sample dump request. </P><P>Responding to a request is only possible while in Upload-mode. Enter this state by pressing the Load button in parameter mode P3. During normal operation all Sample Dump messages are ignored. </P><P>Loop Numbers and Sample Numbers </P><P>Many samplers have sample numbers up to 999. Since the Echoplex has a maximum of 16 loops we have a problem in how to match an incoming sample (e.g. #254) with a loop number. </P><P>The Echoplex gives you the possibility to set a current loop number and a “current” sample number as special Sample Dump parameters. While in Upload-mode press Record to edit the loop number and Overdub to edit the sample number. </P><P>When you send the current loop it is always sent with the sample number you defined on the Echoplex. </P><P>Receiving a sample number in a header or a request is somewhat more complex. To give a maximum of flexibility the following scheme is applied to incoming sample numbers: </P><Table><TR><TD>Sample Number </TD><TD>Accessed Loop (sent or received) </TD></TR><TR><TD>0 </TD><TD>access current loop number. </TD></TR><TR><TD>1-16 </TD><TD>access corresponding loop number 1-16. (if you have that many loops) </TD></TR><TR><TD>17-16383 </TD><TD>access current loop number. (&gt;999 are clipped to 999) </TD></TR></Table><P>The current sample number is then set to this value. Sample numbers on the Echoplex range from 0 to 999. </P><P>Device ID </P><P>The device ID of the Echoplex can be changed while in Upload-mode. Press Multiply to see the device ID.  Press it again to start incrementing the value. The longer you press, the faster the value will be incremented. Broadcasting (device id=127) is implemented. </P></Sect></Sect><Sect><H1>Sample Dump User Manual </H1><Sect><H3>Sending a Dump(Dump-button) </H3><P>The Dump button in the MIDI (P3) parameters of the Echoplex is used to send a dump to another device. </P><L><LI><Lbl>• </Lbl><LBody>You see a 'd' blinking, indicating that data is dumped. </LBody></LI><LI><Lbl>• </Lbl><LBody>Pressing the Parameter button while dumping aborts the transmission. </LBody></LI><LI><Lbl>• </Lbl><LBody>The device ID is 1. </LBody></LI><LI><Lbl>• </Lbl><LBody>The sample number is the same as the loop number. </LBody></LI></L></Sect><Sect><H3 id="LinkTarget_548">Sending &amp; Receiving (Upload-button) </H3><P>Press Load to enter the Upload-Mode. </P><L><LI><Lbl>• </Lbl><LBody>You see a '-' blinking, indicating that the Echoplex waits for specific commands, which can come from the buttons or via MIDI. </LBody></LI><LI><Lbl>• </Lbl><LBody>The Upload-mode allows much more than just uploading.  You can also send a dump from it or change sample dump parameters. </LBody></LI></L><P>Button commands in Upload-mode </P><P>Parameter </P><P>Exits the Upload-mode. You will see the P3 display again. If you received a loop it may be stored in a loop other than the one that you are hearing now.  Leave the parameter mode and select the loop with the Next button. </P><P>Record </P><P>Changes current loop number. The default is the loop you where listening to. Maximaum range from 0 to 16 (depends on the number of loops). Ln is shown in the green display. </P><P>Multiply </P><P>Changes the device ID. The default is 1. Range from 0 to 127. 127 is used to broadcast to all </P><P>receivers/accept all senders. Id is shown in the green display. </P><P>Overdub </P><P>Changes current sample number. The default is the current loop number. Range from 0 to 999. Sn is </P><P>shown in the green display </P><P>Insert </P><P>Reserved. </P><P>Mute </P><P>Reserved. </P><P>Undo (=Dump) Send the current loop. The receiving unit will store it as the current sample number. </P><P>Next (=Upload) Request a dump from the other unit. The current sample number will be sent by the other unit and stored in the current loop. This works only in a closed loop (2 MIDI cables). </P><P>The three value buttons (Record, Overdub, Multiply) work the same way. The first press shows the current value. Subsequent presses increment the value.  If you press the button for a long time it starts repeating. The repeat rate speeds up the longer you press. The maximum speed is reached after approximately 100 increments. When the maximum value is reached, the value is set to minimum (usually 0 or 1) and the repeat rate slows down to give you the possibility to release the button. </P><P>Commands received via MIDI </P><P>While in Upload-mode the following MIDI Sysex commands are accepted: </P><P>SampleHeader(samplenumber) </P><P>Samples with the Sample Numbers 1-16 are stored in the corresponding loop. All other Sample Numbers are ignored and the sample is stored in the current loop number. </P><P>SampleRequest(samplenumber) </P><P>If Sample Numbers 1-16  are requested the corresponding loop is sent. All other Sample Numbers are </P><P>ignored and the current loop is sent as the requested Sample Number. </P></Sect><Sect><H3>Examples </H3><P>The Echoplex is capable of starting the transmission and of passively waiting until the other unit takes control. The following examples give a few examples for transmitting loops from one Echoplex to another one. </P><P>Echoplex A -&gt; Echoplex B (open loop) </P><L><LI><Lbl>•AB </Lbl><LBody>Connect MIDI-Out of Echoplex A with MIDI-In of Echoplex B. </LBody></LI><L><LI><Lbl>•AB </Lbl><LBody>Press Parameters on both units, until they are both in the MIDI parameter mode. </LBody></LI><LI>(A shows 'P3') (B shows 'P3') </LI></L><LI><Lbl>•B </Lbl><LBody>Press Load on Echoplex B. (goes into Upload-Mode showing '-') </LBody></LI><L><LI><Lbl>•A </Lbl><LBody>Press Dump on Echoplex A. </LBody></LI><LI>(A starts dumping showing 'd') (B starts uploading showing 'U') </LI></L><L><LI><Lbl>• </Lbl><LBody>Wait until the entire loop is sent </LBody></LI><LI>(A shows 'P3' again) (B shows '-' again) </LI></L><LI><Lbl>•B </Lbl><LBody>Press Parameters on B to exit Upload-Mode (B shows 'P3' again) </LBody></LI><LI><Lbl>• </Lbl><LBody>Echoplex B has now uploaded the loop. </LBody></LI></L><P>Echoplex A =&gt; Echoplex B (closed loop, A initiates) </P><L><LI><Lbl>•AB </Lbl><LBody>Set MIDIControlSource to “Off” to avoid MIDI loops Connect MIDI-Out of Echoplex A with MIDI-In of Echoplex B. Connect MIDI-Out of Echoplex B with MIDI-In of Echoplex A. </LBody></LI><L><LI><Lbl>•AB </Lbl><LBody>Press Parameters on both units, until they are both in the MIDI parameter mode. </LBody></LI><LI>(A shows 'P3') (B shows 'P3') </LI></L><LI><Lbl>•B </Lbl><LBody>Press Load on Echoplex B. (goes into Upload-Mode showing '-') </LBody></LI><L><LI><Lbl>•A </Lbl><LBody>Press Dump on Echoplex A. </LBody></LI><LI>(A starts dumping showing 'd') (B starts uploading showing 'U') </LI></L><L><LI><Lbl>• </Lbl><LBody>Wait until the entire loop is sent </LBody></LI><LI>(A shows 'P3' again) (B shows '-' again) </LI></L><LI><Lbl>•B </Lbl><LBody>Press Parameters on B to exit Upload-Mode (B shows 'P3' again) </LBody></LI><LI><Lbl>• </Lbl><LBody>Echoplex B has now uploaded the loop. </LBody></LI></L><P>Echoplex A =&gt; Echoplex B (closed loop, B initiates) </P><L><LI><Lbl>•B </Lbl><LBody>Press Load on Echoplex B. (goes into Upload-Mode showing '-') </LBody></LI><LI><Lbl>•A </Lbl><LBody>Press Load on Echoplex A. (goes into Upload-Mode showing '-') </LBody></LI><L><LI><Lbl>•B </Lbl><LBody>Press Load again on Echoplex B. (B sends a SampleRequest to A) </LBody></LI><LI>(A starts dumping showing 'd') (B starts uploading showing 'U') </LI></L><L><LI><Lbl>• </Lbl><LBody>Wait until the entire loop is sent </LBody></LI><LI>(A shows '-' again) (B shows '-' again) </LI></L><LI><Lbl>•A </Lbl><LBody>Press Parameters on A to exit Upload-Mode (A shows 'P3' again) </LBody></LI><L><LI><Lbl>•B </Lbl><LBody>Press Parameters on B to exit Upload-Mode </LBody></LI><LI id="LinkTarget_549">(B shows 'P3' again) </LI></L><LI><Lbl>• </Lbl><LBody>Echoplex B has now uploaded the loop. </LBody></LI></L><P>Not all samplers or computer programs are capable of all of these possible protocols. Some implement only the open loop protocol, some require a closed loop and don't operate on an open loop. It is even possible that your sampler has no Dump button, but can still handle MIDI Sample Dump when the Echoplex is sending the appropriate commands via MIDI. </P></Sect><Sect><H3>How long will it take? </H3><P>Your SampleDump will probably take a long time. MIDI is slow and samples used in looping tend to be big. The exact time depends on how long the sample is and whether the receiving unit acknowledges the data packages or not (the Echoplex does). </P><P>Here are a few estimates for the open loop (no acknowledges): </P><Table><TR><TD>Sample Length </TD><TD>Transmission Time </TD></TR><TR><TD>0.1 sec </TD><TD>9 sec </TD></TR><TR><TD>1.0 sec </TD><TD>1 min </TD></TR><TR><TD>10.0 sec </TD><TD>10 min </TD></TR><TR><TD>100.0 sec </TD><TD>1 hour 50 min </TD></TR></Table><P>And here the closed loop (with acknowledges): </P><Table><TR><TD>Sample Length </TD><TD>Transmission Time </TD></TR><TR><TD>0.1 sec </TD><TD>5 sec </TD></TR><TR><TD>1.0 sec </TD><TD>50 sec </TD></TR><TR><TD>10.0 sec </TD><TD>8 min </TD></TR><TR><TD>100.0 sec </TD><TD>1 hour 50 min </TD></TR></Table></Sect></Sect><Sect><H1>The Other End </H1><Sect><H3>Echoplex </H3><P>Sending MIDI SampleDumps from one Echoplex to another one is simple. </P><P>If you are connecting two Echoplexes make sure they don't use the same MIDI channel and/or the MIDI parameter &quot;ControlSource&quot; is switched off on the sending machines (both machines in a closed loop). This is especially necessary now with the MIDI pipe feature when using closed loop, since any MIDI command received is immediately sent out again. If you forget this, the two machines will send every button you press back and forth to each other in an infinite loop. Unhook them and do one of the following: </P><L><LI><Lbl>• </Lbl><LBody>Choose another MIDI channel on one of them. </LBody></LI><LI><Lbl>• </Lbl><LBody>Switch the MIDI parameter &quot;ControlSource&quot; on the sending machine to off. This is necessary for closed loop, and both must have ControlSource off. </LBody></LI><LI><Lbl>• </Lbl><LBody>Select another MIDI parameter &quot;Source #&quot; for one of them, so they send on another octave. </LBody></LI></L></Sect><Sect><H3>SoundDesigner ® </H3><P>SoundDesigner subtracts 2 from the device ID number. </P><P>Echoplex -&gt; SoundDesigner </P><P>Sending samples from Echoplex to SoundDesigner. </P><P>SoundDesigner -&gt; Echoplex </P><P>SoundDesigner and the Echoplex do not agree on how to calculate the checksum. The Echoplex sends a NAK (=Not Acknowledge) after every data-package. Luckily SoundDesigner ignores all handshake messages and the Echoplex stores it anyway so you will end up with the correct sample in your Echoplex. </P></Sect><Sect><H3>Alchemy ™ </H3><P>Alchemy™ needs to initiate sample dumps in both directions. </P><P>Alchemy™ actually sends the sample number off by one. When you ask for sample #5 it actually requests #4 from the Echoplex. </P><P>Echoplex -&gt; Alchemy™ </P><P>Go into Upload-mode on the Echoplex. Send a request from Alchemy (menu: Network: Get Sound). </P><P>Alchemy™ -&gt; Echoplex </P><P>Go into Upload-mode on the Echoplex. Start the dump from Alchemy™ (menu: Network: Put Sound) Make sure the sample length actually has the number of samples that you want to transmit. Sometimes Alchemy stores short sounds in huge files filling the end with zeroes. </P></Sect><Sect><H3>K2000 ™ </H3><P>The K2000™ reserves the samples 1-199 for ROM samples which can not be dumped or overwritten. </P><P>It automatically adds 200 to incoming samples with sample numbers &lt;200. </P><P>Sample number 0 writes an incoming sample to the first free place. </P><P>The K2000™ always adds 1 to the sample number. </P><P>You have to set the device ID (called Sysex ID) to the same as on the Echoplex. Setting it to 127 doesn’t do the standard behavior (accepting all IDs), so make sure they are equal on both units. </P><P>Echoplex -&gt; K2000™ </P><P>Start sending from the Echoplex at any time. Make sure the sample you write to is free. You need to go into the Edit Keymap to see your new sample.  It is probably best if you add a new Keymap with your new sample. </P><P>K2000 ™-&gt; Echoplex </P><P>Go into Upload-mode on the Echoplex. Select the right sample number and send a Request (Undo-button). You can also start the dump from the K2000™.  The function is well hidden in the sample editor. Press &lt;Dump&gt;. The Echoplex will ignore the sample number you send and store it in the loop number you defined in the Echoplex Upload-mode (Record-button). </P></Sect><Sect><H3>E-MU e64™ </H3><P>The device ID of the E-MU™ is set to 127 and cannot be changed.  It therefore will always accept all samples, independent of your Device ID. </P><P>Echoplex -&gt; E-MU e64™ </P><P>The E-MU™ accepts dumps at any time.  Just start sending from the Echoplex. </P><P id="LinkTarget_550">E-MU e64™ -&gt; Echoplex </P><P>Send a Request from the Echoplex at any time. (faster) </P><P>or </P><P>Start the dump from the E-MU.  This is very slow! </P></Sect></Sect><Sect><H1>Troubleshooting </H1><P>MIDI Sample Dump is a standard. But not all samplers implement this standard the same way. This can lead to problems. </P><Sect><H3>Display </H3><P>Display for received messages </P><P>H header received </P><P>I header received but ignored (e.g. too long) </P><P>L data received (load data packet) </P><P>? wrong packet received (e.g. Sysex for other machines) </P><P>A ACK received </P><P>N NAK received </P><P>W WAIT received </P><P>C CANCEL received </P><P>J junk received (e.g. notes, ignored) </P><P>-nothing received </P><P>Display for sent messages </P><P>d data sent (dump data packet) </P><P>r dump request sent </P><P>c Cancel sent </P><P>H Header sent </P><P>Error values </P><P>In case of an error (display 'E') the red display shows an error number. </P><Table><TR><TH>1 </TH><TD>overrun (data was sent too fast) </TD></TR><TR><TH>2 </TH><TD>buffer overflow (too much data too fast) </TD></TR><TR><TH>3 </TH><TD>timeout (aborted transmission in the midst of a packet) </TD></TR><TR><TH>4 </TH><TD>received value out of range </TD></TR><TR><TH>5 </TH><TD>unexpected value (expected a specific value but received something else) </TD></TR><TR><TH>6 </TH><TD>checksum error </TD></TR></Table><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P></Sect></Sect></Sect><Sect><H1 id="LinkTarget_551">Chapter 9: SYSEX Control Detailed Documentation </H1><P>PROTOCOL FOR ECHOPLEX PARAMETER DUMP ===================================== </P><P>1) GENERIC ECHOPLEX SYSEX FORMAT </P><P>SYSEX AURISIS_ID ECHOPLEX_ID device_id version command {data} [checksum] SYSEXEND </P><P>SYSEX  = 240 = $F0 AURISIS_ID = 00 01 48 = $00 $01 $30 ECHOPLEX_ID = 11 = $0B device_id = value [0..127] set in the MIDI Upload mode. 0 is off (no </P><P>communication) version = format of this message (for backward compatibility) command = see below {data} = depends on version and command SYSEXEND = 247 = $F7 </P><P>2) VERSION </P><P>All Echoplex units are backwards compatible. The version numbers start with 1 (=LD4.0 revision 95/96) </P><P>If data is requested in a known version, the answer will be in this format. </P><P>Version 0 (=zero) is interpreted as the current version of this unit. </P><P>Unknown version numbers are ignored (error message ???) </P><P>The format of the data bytes of the following commands depends on this version number. </P><P>3) COMMANDS </P><P>3.1) COMMANDS VERSION 1 </P><P>Overview: </P><P>F0 00 01 30 0B dev vers cmd {data} F7 </P><P>INFO_REQUEST F0 00 01 30 0B dev vers 0 F7 240 00 01 48 11 dev vers 0 247 </P><P>INFO_DATA F0 00 01 30 0B dev vers 1 vers (mem_1 mem_2 mem_3) F7 240 00 01 48 11 dev vers 1 vers (mem_1 mem_2 mem_3) 247 </P><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P><P>GLOBAL_PARAM_REQUEST F0 00 01 30 0B dev vers 10 from length pset F7 240 00 01 48 11 dev vers 16 from length pset 247 </P><P>GLOBAL_PARAM_DATA F0 00 01 30 0B dev vers 11 from length pset val_1 .. val_n F7 240 00 01 48 11 dev vers 17 from length pset val_1 .. val_n 247 </P><P>LOCAL_PARAM_REQUEST F0 00 01 30 0B dev vers 12 from length pset F7 240 00 01 48 11 dev vers 18 from length pset 247 </P><P>LOCAL_PARAM_DATA F0 00 01 30 0B dev vers 13 from length pset val_1 .. val_n F7 240 00 01 48 11 dev vers 19 from length pset val_1 .. val_n 247 </P><P>ALL_PARAM_REQUEST F0 00 01 30 0B dev vers 14 F7 240 00 01 48 11 dev vers 20 247 </P><P>GLOBAL_PARAM_RESET F0 00 01 30 0B dev vers 20 pset F7 240 00 01 48 11 dev vers 32 pset 247 </P><P>LOCAL_PARAM_RESET F0 00 01 30 0B dev vers 21 pset F7 240 00 01 48 11 dev vers 33 pset 247 </P><P>3.1.1) COMMANDS: INFORMATION GROUP </P><P>3.1.1.1) COMMAND: INFO REQUEST = $0 = 0 </P><P>The info request contains no data bytes. The header contains already all necessary information. </P><P>Returns an INFO command. </P><P>F0 00 01 30 0B dev vers 0 F7 240 00 01 48 11 dev vers 0 247 </P><P>3.1.1.1.1) COMMAND: INFO = $1 = 1 </P><P>Essentially ignored. </P><P>F0  00 01 30 0B dev vers 10 vers (mem_1 mem_2 mem_3) F7 240 00 01 48 11 dev vers 16 vers (mem_1 mem_2 mem_3) 247 </P><P>|byte# | bits | description |_______|______|_____________________________________________ |0 | | vers | version number of this unit |1-3  | 21 | mem | soundmemory size |_______|______|_____________________________________________ </P><P>The version number of the sending unit may be used in further communications. </P><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P><P>3.1.2) COMMANDS: PARAMETER GROUP </P><P>The global parameters are accessed by indexes. </P><P>The indexes in version 1 are: 0 VGPrmPrevParamSet 1 VGPrmParamSet 2 VGPrmMIDIChannel 3 VGPrmMIDIReceiveCommand 4 VGPrmMIDIFirstKey 5 VGPrmMIDIFBCtrlr 6 VGPrmMIDIVolCtrlr 7 VGPrmMIDIFirstLoop 8 VGPrmMIDIDevID 9 VGPrmMIDISampleNumHi</P><P> 10 VGPrmMIDISampleNumLo </P><P>The local parameters are accessed by indexes. </P><P>The indexes in version 1 are: 1 Loop/Delay (4 bits) 2 Timing Quantize (2 bits) </P><Table><TR><TD>3 </TD><TD>8th/Cycle </TD><TD>(8 bit)</TD></TR><TR><TD> 4 </TD><TD>SyncMode </TD><TD>(3 bit)</TD></TR><TR><TD> 5 </TD><TD>TrigThreshold </TD><TD>(4 bits)</TD></TR><TR><TD> 6 </TD><TD>RecordMode </TD><TD>(1 bit)</TD></TR><TR><TD> 7 </TD><TD>OverdubMode </TD><TD>(1 bit)</TD></TR><TR><TD> 8 </TD><TD>RoundMode </TD><TD>(1 bit)</TD></TR><TR><TD> 9 </TD><TD>InsertMode </TD><TD>(4 bits)</TD></TR><TR><TD> 10 </TD><TD>MuteMode </TD><TD>(1 bit)</TD></TR><TR><TD> 11 </TD><TD>Overflow </TD><TD>(1 bit)</TD></TR></Table><P> 12 MoreLoops (4 bits) (real NLoops-1) 13 AutoRecord (1 bit) 14 Next LoopCopy (2 bits) 15 SwitchQuant (3 bits) 16 Velocity (1 bit) 17 SamplerStyle (2 bits) 18 Tempo (7 bits) </P><P>3.1.2.1) COMMAND: GLOBAL_PARAM_REQUEST = $10 = 16 </P><P>Reads a range of global param values and returns them as a GLOBAL_PARAM_DATA command. </P><P>F0 00 01 30 0B dev vers 10 from length pset F7 240 00 01 48 11 dev vers 16 from length pset 247 </P><P>|byte# | bits | description |_______|______|______________________________________________ |0 | 7 | from | param index range start |1 | 7 | length | param index range end |2 | 7 | pset | param set (for future use, so far 127) |_______|______|_____________________________________________ </P><P>3.1.2.2) COMMAND: GLOBAL_PARAM_DATA = $11 = 17 </P><P>Sets a range of global param values to new values. </P><P>F0 00 01 30 0B dev vers 11 from length pset val_1 .. val_n F7 240 00 01 48 11 dev vers 17 from length pset val_1 .. val_n 247 </P><P>|byte# | bits | description |_______|______|_____________________________________________ |0 | 7 | from | param index range start |1 | 7 | length | param index range end |2 | 7 | pset | param set (for future use, so far 127) |3..n | 7 | value | param value(s) |_______|______|_____________________________________________ </P><P>If there are less values than defined by 'from' and 'length', then these parameters will be reset to their default value. </P><P>3.1.2.3) COMMAND: LOCAL_PARAM_REQUEST  = $12 = 18 </P><P>Reads a range of local param values and returns them as a LOCAL_PARAM_DATA command. </P><P>F0 00 01 30 0B dev vers 12 from length pset F7 240 00 01 48 11 dev vers 18 from length pset 247 </P><P>|byte# | bits | description |_______|______|_____________________________________________ |0 | 7 | from | param index range start |1 | 7 | length | param index range end |2 | 7 | pset | param set number. 127 means the current | | | | preset selected in the Echoplex |_______|______|________|____________________________________ </P><P>3.1.2.4) COMMAND: LOCAL_PARAM_DATA = $13 = 19 </P><P>Sets a range of local param values to new values. </P><P>F0 00 01 30 0B dev vers 13 from length pset val_1 .. val_n F7 240 00 01 48 11 dev vers 19 from length pset val_1 .. val_n 247 </P><P>|byte# | bits | description |_______|______|_____________________________________________ |0 | 7 | from | param index range start |1 | 7 | length | param index range end |2 | 7 | pset | param set number. 127 means the pset | | | | actually selected in the Echoplex |3..n | 7 | value | param value(s) |_______|______|_____________________________________________ </P><P>If there are less values than defined by 'from' and 'length', then these parameters will be ignored. </P><P>3.1.2.5) COMMAND: ALL_PARAM_REQUEST = $14 = 20 </P><P>Reads a range of local param values and returns them as a sequence of one GLOBAL_PARAM_DATA command and </P><P>Aurisis Research * PO Box 40200 * Berkeley, CA 94704-4200 * http://www.aurisis.com * info@aurisis.com </P><P>as many LOCAL_PARAM_DATA commands as there are ParamSets. </P><P>F0 00 01 30 0B dev vers 14 F7 240 00 01 48 11 dev vers 20 247 </P><P>3.1.3) COMMANDS: RESET GROUP (not implemented in version 1) </P><P>Resets the global or the current local set. </P><P>3.1.3.1) COMMAND: GLOBAL_PARAM_RESET = $20 = 32 </P><P>Resets the global parameters to the factory defaults. </P><P>F0 00 01 30 0B dev vers 20 pset F7 240 00 01 48 11 dev vers 32 pset 247 </P><P>3.1.3.2) COMMAND: LOCAL_PARAM_RESET  = $21 = 33 </P><P>Resets the current local parameter set to the factory defaults. </P><P>F0 00 01 30 0B dev vers 21 pset F7 240 00 01 48 11 dev vers 33 pset 247 </P><P>4) CHECKSUM CALCULATION </P><P>THE CHECKSUM IS REMOVED! IT MAKES IT TOO HARD TO USE MIDI SOFTWARE LIKE 'MAX'. MAYBE AN OPTIONAL SYSTEM IN THE FUTURE. </P><P>The checksum calculation is the same as in the MIDI Sample Dump. All bytes AFTER the SYSEX (=$F0) are XORed. This checksum is then transmitted as the last data byte before SYSEXEND (=$F7). </P><P>5) COMMUNICATION EXAMPLES </P><P>UNIT A (version 1) UNIT B (version 2) </P><P>InfoRequest( version 1) --------&gt;                                 &lt;--------Info( version 2) // in format vers 1 </P><P>LocalData( version 1, 4, 4) --------&gt;  // stores l_param[4] </P><P>LocalData( version 1, 4, 127) --------&gt;  // stores l_params[4..last] </P><P>LocalRequest( version 1, 0, 127) --------&gt; /* stores l_params[4..last] */ &lt;--------LocalParam( version 1, 0, last) </P><P>LocalRequest( version 0, 0, 127) --------&gt; /* error: unknown version */ &lt;--------LocalData( version 2, 0, last) </P><P>  &lt;--------LocalRequest( version 1, 0, 10) LocalParam( version 1, 0, 10) --------&gt;  // stores l_params[0..10]</P><P>                                 &lt;--------LocalRequest( version 2, 0, 10) LocalData( version 1, 0, 10) /*or error ???*/ --------&gt;  // stores params[0..10] </P><P>Similar behavior for global parameters. </P><P>Please note the special global variable (VGParamSet at index 0) which switches between the local sets. </P><P>Note: This example fully uses the info commands to find out the version of the different units. In most cases this will not be necessary and the two units will simply assume to use the same protocol version. </P></Sect></Part></TaggedPDF-doc>