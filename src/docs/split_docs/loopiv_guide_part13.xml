<P>Confirm Cycle (SwitchQuant = CCY) </P>

<P>Similar to Confirm. (SwitchQuant=CnF). After a confirming action is done, it additionally quantizes to the next Cycle point. </P>

<P>Confirm Loop (SwitchQuant = CLP) </P>

<P>Similar to Confirm. (SwitchQuant=CnF). After a confirming action is done, it additionally quantizes to the next Loop StartPoint. </P>

<P>An example for Confirm Cycle (CCY): </P>

<L>
<LI>
<Lbl>• </Lbl>

<LBody>Have two loops recorded. </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

<LBody>Press NextLoop, it waits for you to do some action. </LBody>
</LI>

<LI>
<Lbl id="LinkTarget_514">• </Lbl>

<LBody>Press the function you want (Record, Overdub, Multiply, Insert, etc...) </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

<LBody>The action will begin in the new loop after the next Cycle point of the current loop. </LBody>
</LI>
</L>

<P>Confirm Cycle and Confirm Loop also give you an alternate quantize type for operation in the current loop: </P>

<L>
<LI>
<Lbl>• </Lbl>

<LBody>You are in loop number 1 </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

<LBody>Press NextLoop until next loop number 1 is displayed </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

<LBody>Any operation will begin according to the Confirm setting, regardless of the Quantize parameter. You can even start Overdub quantized this way! </LBody>
</LI>
</L>
</Sect>

<Sect>
<H3>LoopDividing </H3>

<P>The Quantize parameter has an important new value, 8th,. With Quantize=8th, functions execute at subdivisions of the loop Cycles, giving us LoopDividing. </P>

<P>The 8th/Cycle parameter normally determines how the loop is divided. For example, if 8th/Cycle = 8 the subdivisions are on 8th note boundaries of the Loop time. If 8th = 4, the subdivisions are on quarter notes. With the new values available in the 8th/Cycle parameter, you have a wide range of options for dividing your loop. </P>

<P>The exception is when Sync=In and a MIDI clock is being received. MIDI clock specifically defines 8th notes, so the MIDI clock information is used for Quantizing to 8th notes in this case. </P>

<P>LoopDividing appears simple at first, but offers powerful new techniques when combined with other functions. For example, Replace and the new Substitute function can be used to easily change exactly one eighth note in a loop. Or you can execute Reverse aligned to the nearest quarter note, which feels almost immediate but keeps your loop in tempo as you switch in and out of Reverse. </P>

<P>See the New Parameter Settings chapter for more details on the new options for Quantize and 8th/Cycle. </P>
</Sect>

<Sect>
<H3>New SamplerStyle Options </H3>

<P>SamplerStyle is a parameter that affects how multiple loops are triggered by MIDI or the NextLoop button. A new option called Start has been added, and several of the other options have been improved. </P>

<P>SamplerStyle = Start (StA) </P>

<P>Start is a completely new value for SamplerStyle. It makes the new loop start from the beginning and play forever. This is true whether the loop is entered with NextLoop or triggered by MIDI. </P>

<P>SamplerStyle = Once (OnE) </P>

<P>Once gained an important new functionality over what it had in LoopIII. It still triggers the loop from the start, plays it once, and then goes to Mute when the loop is triggered by MIDI. </P>

<P>However, with the NextLoop button it now plays the next loop once and then returns to the previous loop automatically. This is very helpful as a way to improvise the form of your music. You could have the ‘A’ section looping in Loop 1, and at some point decide you want the ‘B’ or ‘C’ section to drop in for one repetition before returning to the main loop. With SamplerStyle = One you can do this with one press on NextLoop and let the Echoplex take care of everything for you. </P>

<P>There are a few differences in functionality while the new loop is playing once: </P>

<L>
<LI>
<Lbl>• </Lbl>

<LBody>Undo: If you decide you want to stay in the new loop instead of bouncing back, you just have to press Undo while it is playing the single repetition. Instead of bouncing back to the first loop when it reaches the end, it will keep repeating the new one. </LBody>
</LI>

<LI>
<Lbl>• </Lbl>

